'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _sudoPrompt = require('sudo-prompt');

var _sudoPrompt2 = _interopRequireDefault(_sudoPrompt);

var _child_process = require('child_process');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (appPath, targetApplicationPath, spinner, copyInstead = false) {
    let writeAccess = true;
    try {
      yield _fsExtra2.default.access('/Applications', _fsExtra2.default.W_OK);
    } catch (err) {
      writeAccess = false;
    }

    if (yield _fsExtra2.default.pathExists(targetApplicationPath)) {
      spinner.stop();

      var _ref2 = yield _inquirer2.default.createPromptModule()({
        type: 'confirm',
        name: 'confirm',
        message: `The application "${_path2.default.basename(targetApplicationPath)}" appears to already exist in /Applications. Do you want to replace it?`
      });

      const confirm = _ref2.confirm;

      if (!confirm) {
        throw 'Installation stopped by user';
      } else {
        spinner.start();
        yield _fsExtra2.default.remove(targetApplicationPath);
      }
    }

    const moveCommand = `${copyInstead ? 'cp -r' : 'mv'} "${appPath}" "${targetApplicationPath}"`;
    if (writeAccess) {
      yield (0, _pify2.default)(_child_process.exec)(moveCommand);
    } else {
      yield (0, _pify2.default)(_sudoPrompt2.default.exec)(moveCommand, {
        name: 'Electron Forge'
      });
    }
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvbW92ZS1hcHAuanMiXSwibmFtZXMiOlsiYXBwUGF0aCIsInRhcmdldEFwcGxpY2F0aW9uUGF0aCIsInNwaW5uZXIiLCJjb3B5SW5zdGVhZCIsIndyaXRlQWNjZXNzIiwiYWNjZXNzIiwiV19PSyIsImVyciIsInBhdGhFeGlzdHMiLCJzdG9wIiwiY3JlYXRlUHJvbXB0TW9kdWxlIiwidHlwZSIsIm5hbWUiLCJtZXNzYWdlIiwiYmFzZW5hbWUiLCJjb25maXJtIiwic3RhcnQiLCJyZW1vdmUiLCJtb3ZlQ29tbWFuZCIsImV4ZWMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7OztzQ0FFZSxXQUFPQSxPQUFQLEVBQWdCQyxxQkFBaEIsRUFBdUNDLE9BQXZDLEVBQWdEQyxjQUFjLEtBQTlELEVBQXdFO0FBQ3JGLFFBQUlDLGNBQWMsSUFBbEI7QUFDQSxRQUFJO0FBQ0YsWUFBTSxrQkFBR0MsTUFBSCxDQUFVLGVBQVYsRUFBMkIsa0JBQUdDLElBQTlCLENBQU47QUFDRCxLQUZELENBRUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1pILG9CQUFjLEtBQWQ7QUFDRDs7QUFFRCxRQUFJLE1BQU0sa0JBQUdJLFVBQUgsQ0FBY1AscUJBQWQsQ0FBVixFQUFnRDtBQUM5Q0MsY0FBUU8sSUFBUjs7QUFEOEMsa0JBRTFCLE1BQU0sbUJBQVNDLGtCQUFULEdBQThCO0FBQ3REQyxjQUFNLFNBRGdEO0FBRXREQyxjQUFNLFNBRmdEO0FBR3REQyxpQkFBVSxvQkFBbUIsZUFBS0MsUUFBTCxDQUFjYixxQkFBZCxDQUFxQztBQUhaLE9BQTlCLENBRm9COztBQUFBLFlBRXRDYyxPQUZzQyxTQUV0Q0EsT0FGc0M7O0FBTzlDLFVBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1osY0FBTSw4QkFBTjtBQUNELE9BRkQsTUFFTztBQUNMYixnQkFBUWMsS0FBUjtBQUNBLGNBQU0sa0JBQUdDLE1BQUgsQ0FBVWhCLHFCQUFWLENBQU47QUFDRDtBQUNGOztBQUVELFVBQU1pQixjQUFlLEdBQUVmLGNBQWMsT0FBZCxHQUF3QixJQUFLLEtBQUlILE9BQVEsTUFBS0MscUJBQXNCLEdBQTNGO0FBQ0EsUUFBSUcsV0FBSixFQUFpQjtBQUNmLFlBQU0seUNBQVdjLFdBQVgsQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU0sb0JBQUsscUJBQUtDLElBQVYsRUFBZ0JELFdBQWhCLEVBQTZCO0FBQ2pDTixjQUFNO0FBRDJCLE9BQTdCLENBQU47QUFHRDtBQUNGLEciLCJmaWxlIjoidXRpbC9tb3ZlLWFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgaW5xdWlyZXIgZnJvbSAnaW5xdWlyZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcGlmeSBmcm9tICdwaWZ5JztcbmltcG9ydCBzdWRvIGZyb20gJ3N1ZG8tcHJvbXB0JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGFwcFBhdGgsIHRhcmdldEFwcGxpY2F0aW9uUGF0aCwgc3Bpbm5lciwgY29weUluc3RlYWQgPSBmYWxzZSkgPT4ge1xuICBsZXQgd3JpdGVBY2Nlc3MgPSB0cnVlO1xuICB0cnkge1xuICAgIGF3YWl0IGZzLmFjY2VzcygnL0FwcGxpY2F0aW9ucycsIGZzLldfT0spO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB3cml0ZUFjY2VzcyA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGF3YWl0IGZzLnBhdGhFeGlzdHModGFyZ2V0QXBwbGljYXRpb25QYXRoKSkge1xuICAgIHNwaW5uZXIuc3RvcCgpO1xuICAgIGNvbnN0IHsgY29uZmlybSB9ID0gYXdhaXQgaW5xdWlyZXIuY3JlYXRlUHJvbXB0TW9kdWxlKCkoe1xuICAgICAgdHlwZTogJ2NvbmZpcm0nLFxuICAgICAgbmFtZTogJ2NvbmZpcm0nLFxuICAgICAgbWVzc2FnZTogYFRoZSBhcHBsaWNhdGlvbiBcIiR7cGF0aC5iYXNlbmFtZSh0YXJnZXRBcHBsaWNhdGlvblBhdGgpfVwiIGFwcGVhcnMgdG8gYWxyZWFkeSBleGlzdCBpbiAvQXBwbGljYXRpb25zLiBEbyB5b3Ugd2FudCB0byByZXBsYWNlIGl0P2AsXG4gICAgfSk7XG4gICAgaWYgKCFjb25maXJtKSB7XG4gICAgICB0aHJvdyAnSW5zdGFsbGF0aW9uIHN0b3BwZWQgYnkgdXNlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwaW5uZXIuc3RhcnQoKTtcbiAgICAgIGF3YWl0IGZzLnJlbW92ZSh0YXJnZXRBcHBsaWNhdGlvblBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1vdmVDb21tYW5kID0gYCR7Y29weUluc3RlYWQgPyAnY3AgLXInIDogJ212J30gXCIke2FwcFBhdGh9XCIgXCIke3RhcmdldEFwcGxpY2F0aW9uUGF0aH1cImA7XG4gIGlmICh3cml0ZUFjY2Vzcykge1xuICAgIGF3YWl0IHBpZnkoZXhlYykobW92ZUNvbW1hbmQpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHBpZnkoc3Vkby5leGVjKShtb3ZlQ29tbWFuZCwge1xuICAgICAgbmFtZTogJ0VsZWN0cm9uIEZvcmdlJyxcbiAgICB9KTtcbiAgfVxufTtcbiJdfQ==