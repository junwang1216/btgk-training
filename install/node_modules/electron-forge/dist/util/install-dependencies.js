'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _bluebird = require('bluebird');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _yarnOrNpm = require('./yarn-or-npm');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:dependency-installer');

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (dir, deps, areDev = false, exact = false) {
    d('installing', (0, _stringify2.default)(deps), 'in:', dir, `dev=${areDev},exact=${exact},withYarn=${(0, _yarnOrNpm.hasYarn)()}`);
    if (deps.length === 0) {
      d('nothing to install, stopping immediately');
      return _promise2.default.resolve();
    }
    let cmd = ['install'].concat(deps);
    if ((0, _yarnOrNpm.hasYarn)()) {
      cmd = ['add'].concat(deps);
      if (areDev) cmd.push('--dev');
      if (exact) cmd.push('--exact');
    } else {
      if (exact) cmd.push('--save-exact');
      if (areDev) cmd.push('--save-dev');
      if (!areDev) cmd.push('--save');
    }
    d('executing', (0, _stringify2.default)(cmd), 'in:', dir);
    try {
      yield (0, _yarnOrNpm.yarnOrNpmSpawn)(cmd, {
        cwd: dir,
        stdio: _config2.default.get('verbose') ? 'inherit' : 'pipe'
      });
    } catch (err) {
      throw new Error(`Failed to install modules: ${(0, _stringify2.default)(deps)}\n\nWith output: ${err.message}`);
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMuanMiXSwibmFtZXMiOlsiZCIsImRpciIsImRlcHMiLCJhcmVEZXYiLCJleGFjdCIsImxlbmd0aCIsInJlc29sdmUiLCJjbWQiLCJjb25jYXQiLCJwdXNoIiwiY3dkIiwic3RkaW8iLCJnZXQiLCJlcnIiLCJFcnJvciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUVBOzs7Ozs7QUFFQSxNQUFNQSxJQUFJLHFCQUFNLHFDQUFOLENBQVY7OztzQ0FFZSxXQUFPQyxHQUFQLEVBQVlDLElBQVosRUFBa0JDLFNBQVMsS0FBM0IsRUFBa0NDLFFBQVEsS0FBMUMsRUFBb0Q7QUFDakVKLE1BQUUsWUFBRixFQUFnQix5QkFBZUUsSUFBZixDQUFoQixFQUFzQyxLQUF0QyxFQUE2Q0QsR0FBN0MsRUFBbUQsT0FBTUUsTUFBTyxVQUFTQyxLQUFNLGFBQVkseUJBQVUsRUFBckc7QUFDQSxRQUFJRixLQUFLRyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCTCxRQUFFLDBDQUFGO0FBQ0EsYUFBTyxrQkFBUU0sT0FBUixFQUFQO0FBQ0Q7QUFDRCxRQUFJQyxNQUFNLENBQUMsU0FBRCxFQUFZQyxNQUFaLENBQW1CTixJQUFuQixDQUFWO0FBQ0EsUUFBSSx5QkFBSixFQUFlO0FBQ2JLLFlBQU0sQ0FBQyxLQUFELEVBQVFDLE1BQVIsQ0FBZU4sSUFBZixDQUFOO0FBQ0EsVUFBSUMsTUFBSixFQUFZSSxJQUFJRSxJQUFKLENBQVMsT0FBVDtBQUNaLFVBQUlMLEtBQUosRUFBV0csSUFBSUUsSUFBSixDQUFTLFNBQVQ7QUFDWixLQUpELE1BSU87QUFDTCxVQUFJTCxLQUFKLEVBQVdHLElBQUlFLElBQUosQ0FBUyxjQUFUO0FBQ1gsVUFBSU4sTUFBSixFQUFZSSxJQUFJRSxJQUFKLENBQVMsWUFBVDtBQUNaLFVBQUksQ0FBQ04sTUFBTCxFQUFhSSxJQUFJRSxJQUFKLENBQVMsUUFBVDtBQUNkO0FBQ0RULE1BQUUsV0FBRixFQUFlLHlCQUFlTyxHQUFmLENBQWYsRUFBb0MsS0FBcEMsRUFBMkNOLEdBQTNDO0FBQ0EsUUFBSTtBQUNGLFlBQU0sK0JBQWVNLEdBQWYsRUFBb0I7QUFDeEJHLGFBQUtULEdBRG1CO0FBRXhCVSxlQUFPLGlCQUFPQyxHQUFQLENBQVcsU0FBWCxJQUF3QixTQUF4QixHQUFvQztBQUZuQixPQUFwQixDQUFOO0FBSUQsS0FMRCxDQUtFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLFlBQU0sSUFBSUMsS0FBSixDQUFXLDhCQUE2Qix5QkFBZVosSUFBZixDQUFxQixvQkFBbUJXLElBQUlFLE9BQVEsRUFBNUYsQ0FBTjtBQUNEO0FBQ0YsRyIsImZpbGUiOiJ1dGlsL2luc3RhbGwtZGVwZW5kZW5jaWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IHlhcm5Pck5wbVNwYXduLCBoYXNZYXJuIH0gZnJvbSAnLi95YXJuLW9yLW5wbSc7XG5cbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmRlcGVuZGVuY3ktaW5zdGFsbGVyJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChkaXIsIGRlcHMsIGFyZURldiA9IGZhbHNlLCBleGFjdCA9IGZhbHNlKSA9PiB7XG4gIGQoJ2luc3RhbGxpbmcnLCBKU09OLnN0cmluZ2lmeShkZXBzKSwgJ2luOicsIGRpciwgYGRldj0ke2FyZURldn0sZXhhY3Q9JHtleGFjdH0sd2l0aFlhcm49JHtoYXNZYXJuKCl9YCk7XG4gIGlmIChkZXBzLmxlbmd0aCA9PT0gMCkge1xuICAgIGQoJ25vdGhpbmcgdG8gaW5zdGFsbCwgc3RvcHBpbmcgaW1tZWRpYXRlbHknKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgbGV0IGNtZCA9IFsnaW5zdGFsbCddLmNvbmNhdChkZXBzKTtcbiAgaWYgKGhhc1lhcm4oKSkge1xuICAgIGNtZCA9IFsnYWRkJ10uY29uY2F0KGRlcHMpO1xuICAgIGlmIChhcmVEZXYpIGNtZC5wdXNoKCctLWRldicpO1xuICAgIGlmIChleGFjdCkgY21kLnB1c2goJy0tZXhhY3QnKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZXhhY3QpIGNtZC5wdXNoKCctLXNhdmUtZXhhY3QnKTtcbiAgICBpZiAoYXJlRGV2KSBjbWQucHVzaCgnLS1zYXZlLWRldicpO1xuICAgIGlmICghYXJlRGV2KSBjbWQucHVzaCgnLS1zYXZlJyk7XG4gIH1cbiAgZCgnZXhlY3V0aW5nJywgSlNPTi5zdHJpbmdpZnkoY21kKSwgJ2luOicsIGRpcik7XG4gIHRyeSB7XG4gICAgYXdhaXQgeWFybk9yTnBtU3Bhd24oY21kLCB7XG4gICAgICBjd2Q6IGRpcixcbiAgICAgIHN0ZGlvOiBjb25maWcuZ2V0KCd2ZXJib3NlJykgPyAnaW5oZXJpdCcgOiAncGlwZScsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGluc3RhbGwgbW9kdWxlczogJHtKU09OLnN0cmluZ2lmeShkZXBzKX1cXG5cXG5XaXRoIG91dHB1dDogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufTtcbiJdfQ==