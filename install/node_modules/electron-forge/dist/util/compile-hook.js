'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _oraHandler = require('./ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

var _readPackageJson = require('./read-package-json');

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (originalDir, buildPath, electronVersion, pPlatform, pArch, done) {
    yield (0, _oraHandler2.default)('Compiling Application', (0, _bluebird.coroutine)(function* () {
      let compileAndShim = (() => {
        var _ref3 = (0, _bluebird.coroutine)(function* (appDir) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (0, _getIterator3.default)((yield _fsExtra2.default.readdir(appDir))), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              const entry = _step.value;

              if (!entry.match(/^(node_modules|bower_components)$/)) {
                const fullPath = _path2.default.join(appDir, entry);

                if ((yield _fsExtra2.default.stat(fullPath)).isDirectory()) {
                  const log = console.log;
                  console.log = function () {};
                  yield compileCLI.main(appDir, [fullPath]);
                  console.log = log;
                }
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          const packageJSON = yield (0, _readPackageJson2.default)(appDir);

          const index = packageJSON.main || 'index.js';
          packageJSON.originalMain = index;
          packageJSON.main = 'es6-shim.js';

          yield _fsExtra2.default.writeFile(_path2.default.join(appDir, 'es6-shim.js'), (yield _fsExtra2.default.readFile(_path2.default.join(_path2.default.resolve(originalDir, 'node_modules/electron-compile/lib/es6-shim.js')), 'utf8')));

          yield _fsExtra2.default.writeJson(_path2.default.join(appDir, 'package.json'), packageJSON, { spaces: 2 });
        });

        return function compileAndShim(_x7) {
          return _ref3.apply(this, arguments);
        };
      })();

      const compileCLI = require(_path2.default.resolve(originalDir, 'node_modules/electron-compile/lib/cli.js'));

      yield compileAndShim(buildPath);
    }));
    done();
  });

  return function (_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY29tcGlsZS1ob29rLmpzIl0sIm5hbWVzIjpbIm9yaWdpbmFsRGlyIiwiYnVpbGRQYXRoIiwiZWxlY3Ryb25WZXJzaW9uIiwicFBsYXRmb3JtIiwicEFyY2giLCJkb25lIiwiYXBwRGlyIiwicmVhZGRpciIsImVudHJ5IiwibWF0Y2giLCJmdWxsUGF0aCIsImpvaW4iLCJzdGF0IiwiaXNEaXJlY3RvcnkiLCJsb2ciLCJjb25zb2xlIiwiY29tcGlsZUNMSSIsIm1haW4iLCJwYWNrYWdlSlNPTiIsImluZGV4Iiwib3JpZ2luYWxNYWluIiwid3JpdGVGaWxlIiwicmVhZEZpbGUiLCJyZXNvbHZlIiwid3JpdGVKc29uIiwic3BhY2VzIiwiY29tcGlsZUFuZFNoaW0iLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7OztzQ0FFZSxXQUFNQSxXQUFOLEVBQW1CQyxTQUFuQixFQUE4QkMsZUFBOUIsRUFBK0NDLFNBQS9DLEVBQTBEQyxLQUExRCxFQUFpRUMsSUFBakUsRUFBMEU7QUFDdkYsVUFBTSwwQkFBUyx1QkFBVCwyQkFBa0MsYUFBWTtBQUFBO0FBQUEsNkNBR2xELFdBQThCQyxNQUE5QixFQUFzQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNwQyw2REFBb0IsTUFBTSxrQkFBR0MsT0FBSCxDQUFXRCxNQUFYLENBQTFCLDZHQUE4QztBQUFBLG9CQUFuQ0UsS0FBbUM7O0FBQzVDLGtCQUFJLENBQUNBLE1BQU1DLEtBQU4sQ0FBWSxtQ0FBWixDQUFMLEVBQXVEO0FBQ3JELHNCQUFNQyxXQUFXLGVBQUtDLElBQUwsQ0FBVUwsTUFBVixFQUFrQkUsS0FBbEIsQ0FBakI7O0FBRUEsb0JBQUksQ0FBQyxNQUFNLGtCQUFHSSxJQUFILENBQVFGLFFBQVIsQ0FBUCxFQUEwQkcsV0FBMUIsRUFBSixFQUE2QztBQUMzQyx3QkFBTUMsTUFBTUMsUUFBUUQsR0FBcEI7QUFDQUMsMEJBQVFELEdBQVIsR0FBYyxZQUFNLENBQUUsQ0FBdEI7QUFDQSx3QkFBTUUsV0FBV0MsSUFBWCxDQUFnQlgsTUFBaEIsRUFBd0IsQ0FBQ0ksUUFBRCxDQUF4QixDQUFOO0FBQ0FLLDBCQUFRRCxHQUFSLEdBQWNBLEdBQWQ7QUFDRDtBQUNGO0FBQ0Y7QUFabUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFjcEMsZ0JBQU1JLGNBQWMsTUFBTSwrQkFBZ0JaLE1BQWhCLENBQTFCOztBQUVBLGdCQUFNYSxRQUFRRCxZQUFZRCxJQUFaLElBQW9CLFVBQWxDO0FBQ0FDLHNCQUFZRSxZQUFaLEdBQTJCRCxLQUEzQjtBQUNBRCxzQkFBWUQsSUFBWixHQUFtQixhQUFuQjs7QUFFQSxnQkFBTSxrQkFBR0ksU0FBSCxDQUFhLGVBQUtWLElBQUwsQ0FBVUwsTUFBVixFQUFrQixhQUFsQixDQUFiLEdBQ0osTUFBTSxrQkFBR2dCLFFBQUgsQ0FBWSxlQUFLWCxJQUFMLENBQVUsZUFBS1ksT0FBTCxDQUFhdkIsV0FBYixFQUEwQiwrQ0FBMUIsQ0FBVixDQUFaLEVBQW1HLE1BQW5HLENBREYsRUFBTjs7QUFHQSxnQkFBTSxrQkFBR3dCLFNBQUgsQ0FBYSxlQUFLYixJQUFMLENBQVVMLE1BQVYsRUFBa0IsY0FBbEIsQ0FBYixFQUFnRFksV0FBaEQsRUFBNkQsRUFBRU8sUUFBUSxDQUFWLEVBQTdELENBQU47QUFDRCxTQTNCaUQ7O0FBQUEsd0JBR25DQyxjQUhtQztBQUFBO0FBQUE7QUFBQTs7QUFDbEQsWUFBTVYsYUFBYVcsUUFBUSxlQUFLSixPQUFMLENBQWF2QixXQUFiLEVBQTBCLDBDQUExQixDQUFSLENBQW5COztBQTRCQSxZQUFNMEIsZUFBZXpCLFNBQWYsQ0FBTjtBQUNELEtBOUJLLEVBQU47QUErQkFJO0FBQ0QsRyIsImZpbGUiOiJ1dGlsL2NvbXBpbGUtaG9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IGFzeW5jT3JhIGZyb20gJy4vb3JhLWhhbmRsZXInO1xuaW1wb3J0IHJlYWRQYWNrYWdlSlNPTiBmcm9tICcuL3JlYWQtcGFja2FnZS1qc29uJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMob3JpZ2luYWxEaXIsIGJ1aWxkUGF0aCwgZWxlY3Ryb25WZXJzaW9uLCBwUGxhdGZvcm0sIHBBcmNoLCBkb25lKSA9PiB7XG4gIGF3YWl0IGFzeW5jT3JhKCdDb21waWxpbmcgQXBwbGljYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY29tcGlsZUNMSSA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKG9yaWdpbmFsRGlyLCAnbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWNvbXBpbGUvbGliL2NsaS5qcycpKTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIGNvbXBpbGVBbmRTaGltKGFwcERpcikge1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBhd2FpdCBmcy5yZWFkZGlyKGFwcERpcikpIHtcbiAgICAgICAgaWYgKCFlbnRyeS5tYXRjaCgvXihub2RlX21vZHVsZXN8Ym93ZXJfY29tcG9uZW50cykkLykpIHtcbiAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGguam9pbihhcHBEaXIsIGVudHJ5KTtcblxuICAgICAgICAgIGlmICgoYXdhaXQgZnMuc3RhdChmdWxsUGF0aCkpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvZyA9IGNvbnNvbGUubG9nO1xuICAgICAgICAgICAgY29uc29sZS5sb2cgPSAoKSA9PiB7fTtcbiAgICAgICAgICAgIGF3YWl0IGNvbXBpbGVDTEkubWFpbihhcHBEaXIsIFtmdWxsUGF0aF0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2cgPSBsb2c7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OID0gYXdhaXQgcmVhZFBhY2thZ2VKU09OKGFwcERpcik7XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gcGFja2FnZUpTT04ubWFpbiB8fCAnaW5kZXguanMnO1xuICAgICAgcGFja2FnZUpTT04ub3JpZ2luYWxNYWluID0gaW5kZXg7XG4gICAgICBwYWNrYWdlSlNPTi5tYWluID0gJ2VzNi1zaGltLmpzJztcblxuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGguam9pbihhcHBEaXIsICdlczYtc2hpbS5qcycpLFxuICAgICAgICBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLmpvaW4ocGF0aC5yZXNvbHZlKG9yaWdpbmFsRGlyLCAnbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWNvbXBpbGUvbGliL2VzNi1zaGltLmpzJykpLCAndXRmOCcpKTtcblxuICAgICAgYXdhaXQgZnMud3JpdGVKc29uKHBhdGguam9pbihhcHBEaXIsICdwYWNrYWdlLmpzb24nKSwgcGFja2FnZUpTT04sIHsgc3BhY2VzOiAyIH0pO1xuICAgIH1cblxuICAgIGF3YWl0IGNvbXBpbGVBbmRTaGltKGJ1aWxkUGF0aCk7XG4gIH0pO1xuICBkb25lKCk7XG59O1xuIl19