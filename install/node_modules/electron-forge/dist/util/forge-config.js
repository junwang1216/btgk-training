'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.setInitialForgeConfig = setInitialForgeConfig;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash.template');

var _lodash2 = _interopRequireDefault(_lodash);

var _readPackageJson = require('./read-package-json');

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

var _yarnOrNpm = require('./yarn-or-npm');

var _yarnOrNpm2 = _interopRequireDefault(_yarnOrNpm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const underscoreCase = str => str.replace(/(.)([A-Z][a-z]+)/g, '$1_$2').replace(/([a-z0-9])([A-Z])/g, '$1_$2').toUpperCase();

const proxify = (object, envPrefix) => {
  const newObject = {};

  (0, _keys2.default)(object).forEach(key => {
    if (typeof object[key] === 'object' && !Array.isArray(object[key])) {
      newObject[key] = proxify(object[key], `${envPrefix}_${underscoreCase(key)}`);
    } else {
      newObject[key] = object[key];
    }
  });

  return new Proxy(newObject, {
    get(target, name) {
      // eslint-disable-next-line no-prototype-builtins
      if (!target.hasOwnProperty(name) && typeof name === 'string') {
        const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`];
        if (envValue) return envValue;
      }
      return target[name];
    },
    getOwnPropertyDescriptor(target, name) {
      const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`];
      // eslint-disable-next-line no-prototype-builtins
      if (target.hasOwnProperty(name)) {
        return (0, _getOwnPropertyDescriptor2.default)(target, name);
      } else if (envValue) {
        return { writable: true, enumerable: true, configurable: true, value: envValue };
      }
    }
  });
};

/**
 * Sets sensible defaults for the `config.forge` object.
 */
function setInitialForgeConfig(packageJSON) {
  var _packageJSON$name = packageJSON.name;
  const name = _packageJSON$name === undefined ? '' : _packageJSON$name;
  var _packageJSON$productN = packageJSON.productName;
  const productName = _packageJSON$productN === undefined ? name : _packageJSON$productN;

  /* eslint-disable no-param-reassign */

  packageJSON.config.forge.electronWinstallerConfig.name = name.replace(/-/g, '_');
  packageJSON.config.forge.windowsStoreConfig.name = productName.replace(/-/g, '');
  packageJSON.config.forge.electronPackagerConfig.packageManager = (0, _yarnOrNpm2.default)();
  /* eslint-enable no-param-reassign */
}

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (dir) {
    const packageJSON = yield (0, _readPackageJson2.default)(dir);
    let forgeConfig = packageJSON.config.forge;
    if (typeof forgeConfig === 'string' && ((yield _fsExtra2.default.pathExists(_path2.default.resolve(dir, forgeConfig))) || (yield _fsExtra2.default.pathExists(_path2.default.resolve(dir, `${forgeConfig}.js`))))) {
      try {
        forgeConfig = require(_path2.default.resolve(dir, forgeConfig));
      } catch (err) {
        console.error(`Failed to load: ${_path2.default.resolve(dir, forgeConfig)}`);
        throw err;
      }
    } else if (typeof forgeConfig !== 'object') {
      throw new Error('Expected packageJSON.config.forge to be an object or point to a requirable JS file');
    }
    forgeConfig = (0, _assign2.default)({
      make_targets: {},
      publish_targets: {},
      electronPackagerConfig: {},
      electronRebuildConfig: {},
      electronWinstallerConfig: {},
      electronInstallerDebian: {},
      electronInstallerDMG: {},
      electronInstallerRedhat: {},
      s3: {},
      github_repository: {},
      electronReleaseServer: {}
    }, forgeConfig);
    forgeConfig.make_targets = (0, _assign2.default)({
      win32: ['squirrel'],
      darwin: ['zip'],
      mas: ['zip'],
      linux: ['deb', 'rpm']
    }, forgeConfig.make_targets);
    forgeConfig.publish_targets = (0, _assign2.default)({
      win32: ['github'],
      darwin: ['github'],
      mas: ['github'],
      linux: ['github']
    }, forgeConfig.publish_targets);

    const templateObj = (0, _assign2.default)({}, packageJSON, { year: new Date().getFullYear() });
    const template = function template(obj) {
      (0, _keys2.default)(obj).forEach(function (objKey) {
        if (typeof obj[objKey] === 'object' && obj !== null) {
          template(obj[objKey]);
        } else if (typeof obj[objKey] === 'string') {
          obj[objKey] = (0, _lodash2.default)(obj[objKey])(templateObj); // eslint-disable-line
          if (obj[objKey].startsWith('require:')) {
            obj[objKey] = require(_path2.default.resolve(dir, obj[objKey].substr(8))); // eslint-disable-line
          }
        }
      });
    };

    template(forgeConfig);

    return proxify(forgeConfig, 'ELECTRON_FORGE');
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,