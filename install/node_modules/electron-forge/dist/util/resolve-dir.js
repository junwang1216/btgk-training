'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readPackageJson = require('./read-package-json');

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:project-resolver');

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (dir) {
    let mDir = dir;
    let prevDir;
    while (prevDir !== mDir) {
      prevDir = mDir;
      const testPath = _path2.default.resolve(mDir, 'package.json');
      d('searching for project in:', mDir);
      if (yield _fsExtra2.default.pathExists(testPath)) {
        const packageJSON = yield (0, _readPackageJson2.default)(mDir);

        if (packageJSON.devDependencies && packageJSON.devDependencies['electron-prebuilt-compile']) {
          if (!/[0-9]/.test(packageJSON.devDependencies['electron-prebuilt-compile'][0])) {
            throw 'You must depend on an EXACT version of "electron-prebuilt-compile" not a range';
          }
        } else {
          throw 'You must depend on "electron-prebuilt-compile" in your devDependencies';
        }

        if (packageJSON.config && packageJSON.config.forge) {
          d('electron-forge compatible package.json found in', testPath);
          return mDir;
        }
      }
      mDir = _path2.default.dirname(mDir);
    }
    return null;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcmVzb2x2ZS1kaXIuanMiXSwibmFtZXMiOlsiZCIsImRpciIsIm1EaXIiLCJwcmV2RGlyIiwidGVzdFBhdGgiLCJyZXNvbHZlIiwicGF0aEV4aXN0cyIsInBhY2thZ2VKU09OIiwiZGV2RGVwZW5kZW5jaWVzIiwidGVzdCIsImNvbmZpZyIsImZvcmdlIiwiZGlybmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsSUFBSSxxQkFBTSxpQ0FBTixDQUFWOzs7c0NBRWUsV0FBT0MsR0FBUCxFQUFlO0FBQzVCLFFBQUlDLE9BQU9ELEdBQVg7QUFDQSxRQUFJRSxPQUFKO0FBQ0EsV0FBT0EsWUFBWUQsSUFBbkIsRUFBeUI7QUFDdkJDLGdCQUFVRCxJQUFWO0FBQ0EsWUFBTUUsV0FBVyxlQUFLQyxPQUFMLENBQWFILElBQWIsRUFBbUIsY0FBbkIsQ0FBakI7QUFDQUYsUUFBRSwyQkFBRixFQUErQkUsSUFBL0I7QUFDQSxVQUFJLE1BQU0sa0JBQUdJLFVBQUgsQ0FBY0YsUUFBZCxDQUFWLEVBQW1DO0FBQ2pDLGNBQU1HLGNBQWMsTUFBTSwrQkFBZ0JMLElBQWhCLENBQTFCOztBQUVBLFlBQUlLLFlBQVlDLGVBQVosSUFBK0JELFlBQVlDLGVBQVosQ0FBNEIsMkJBQTVCLENBQW5DLEVBQTZGO0FBQzNGLGNBQUksQ0FBQyxRQUFRQyxJQUFSLENBQWFGLFlBQVlDLGVBQVosQ0FBNEIsMkJBQTVCLEVBQXlELENBQXpELENBQWIsQ0FBTCxFQUFnRjtBQUM5RSxrQkFBTSxnRkFBTjtBQUNEO0FBQ0YsU0FKRCxNQUlPO0FBQ0wsZ0JBQU0sd0VBQU47QUFDRDs7QUFFRCxZQUFJRCxZQUFZRyxNQUFaLElBQXNCSCxZQUFZRyxNQUFaLENBQW1CQyxLQUE3QyxFQUFvRDtBQUNsRFgsWUFBRSxpREFBRixFQUFxREksUUFBckQ7QUFDQSxpQkFBT0YsSUFBUDtBQUNEO0FBQ0Y7QUFDREEsYUFBTyxlQUFLVSxPQUFMLENBQWFWLElBQWIsQ0FBUDtBQUNEO0FBQ0QsV0FBTyxJQUFQO0FBQ0QsRyIsImZpbGUiOiJ1dGlsL3Jlc29sdmUtZGlyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCByZWFkUGFja2FnZUpTT04gZnJvbSAnLi9yZWFkLXBhY2thZ2UtanNvbic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6cHJvamVjdC1yZXNvbHZlcicpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyKSA9PiB7XG4gIGxldCBtRGlyID0gZGlyO1xuICBsZXQgcHJldkRpcjtcbiAgd2hpbGUgKHByZXZEaXIgIT09IG1EaXIpIHtcbiAgICBwcmV2RGlyID0gbURpcjtcbiAgICBjb25zdCB0ZXN0UGF0aCA9IHBhdGgucmVzb2x2ZShtRGlyLCAncGFja2FnZS5qc29uJyk7XG4gICAgZCgnc2VhcmNoaW5nIGZvciBwcm9qZWN0IGluOicsIG1EaXIpO1xuICAgIGlmIChhd2FpdCBmcy5wYXRoRXhpc3RzKHRlc3RQYXRoKSkge1xuICAgICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCByZWFkUGFja2FnZUpTT04obURpcik7XG5cbiAgICAgIGlmIChwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMgJiYgcGFja2FnZUpTT04uZGV2RGVwZW5kZW5jaWVzWydlbGVjdHJvbi1wcmVidWlsdC1jb21waWxlJ10pIHtcbiAgICAgICAgaWYgKCEvWzAtOV0vLnRlc3QocGFja2FnZUpTT04uZGV2RGVwZW5kZW5jaWVzWydlbGVjdHJvbi1wcmVidWlsdC1jb21waWxlJ11bMF0pKSB7XG4gICAgICAgICAgdGhyb3cgJ1lvdSBtdXN0IGRlcGVuZCBvbiBhbiBFWEFDVCB2ZXJzaW9uIG9mIFwiZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZVwiIG5vdCBhIHJhbmdlJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgJ1lvdSBtdXN0IGRlcGVuZCBvbiBcImVsZWN0cm9uLXByZWJ1aWx0LWNvbXBpbGVcIiBpbiB5b3VyIGRldkRlcGVuZGVuY2llcyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYWNrYWdlSlNPTi5jb25maWcgJiYgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlKSB7XG4gICAgICAgIGQoJ2VsZWN0cm9uLWZvcmdlIGNvbXBhdGlibGUgcGFja2FnZS5qc29uIGZvdW5kIGluJywgdGVzdFBhdGgpO1xuICAgICAgICByZXR1cm4gbURpcjtcbiAgICAgIH1cbiAgICB9XG4gICAgbURpciA9IHBhdGguZGlybmFtZShtRGlyKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iXX0=