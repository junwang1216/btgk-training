'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _ora = require('./ora');

var _ora2 = _interopRequireDefault(_ora);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MockOra {
  succeed() {
    return this;
  }
  fail() {
    return this;
  }
  start() {
    return this;
  }
  stop() {
    return this;
  }
}

const asyncOra = (initialOraValue, asyncFn, processExitFn = process.exit) => {
  let fnOra = new MockOra();
  if (asyncOra.interactive) {
    fnOra = (0, _ora2.default)(initialOraValue).start();
  }
  return new _promise2.default((resolve, reject) => {
    asyncFn(fnOra).then(() => {
      fnOra.succeed();
      resolve();
    }).catch(err => {
      fnOra.fail();
      if (asyncOra.interactive) {
        if (err && err.message && err.stack) {
          console.error('\nAn unhandled error has occurred inside Forge:'.red);
          console.error(_colors2.default.red(err.message));
          console.error(_colors2.default.red(err.stack));
        } else {
          console.error('\nElectron forge was terminated:'.red);
          console.error(_colors2.default.red(typeof err === 'string' ? err : (0, _stringify2.default)(err)));
        }
        processExitFn(1);
        // If the process is still alive we should continue because either something went really wrong
        // or we are testing this function
        setTimeout(() => resolve(), 500);
      } else {
        reject(err);
      }
    });
  });
};

asyncOra.interactive = true;

exports.default = asyncOra;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvb3JhLWhhbmRsZXIuanMiXSwibmFtZXMiOlsiTW9ja09yYSIsInN1Y2NlZWQiLCJmYWlsIiwic3RhcnQiLCJzdG9wIiwiYXN5bmNPcmEiLCJpbml0aWFsT3JhVmFsdWUiLCJhc3luY0ZuIiwicHJvY2Vzc0V4aXRGbiIsInByb2Nlc3MiLCJleGl0IiwiZm5PcmEiLCJpbnRlcmFjdGl2ZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwiY2F0Y2giLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJjb25zb2xlIiwiZXJyb3IiLCJyZWQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLE9BQU4sQ0FBYztBQUNaQyxZQUFVO0FBQUUsV0FBTyxJQUFQO0FBQWM7QUFDMUJDLFNBQU87QUFBRSxXQUFPLElBQVA7QUFBYztBQUN2QkMsVUFBUTtBQUFFLFdBQU8sSUFBUDtBQUFjO0FBQ3hCQyxTQUFPO0FBQUUsV0FBTyxJQUFQO0FBQWM7QUFKWDs7QUFPZCxNQUFNQyxXQUFXLENBQUNDLGVBQUQsRUFBa0JDLE9BQWxCLEVBQTJCQyxnQkFBZ0JDLFFBQVFDLElBQW5ELEtBQTREO0FBQzNFLE1BQUlDLFFBQVEsSUFBSVgsT0FBSixFQUFaO0FBQ0EsTUFBSUssU0FBU08sV0FBYixFQUEwQjtBQUN4QkQsWUFBUSxtQkFBSUwsZUFBSixFQUFxQkgsS0FBckIsRUFBUjtBQUNEO0FBQ0QsU0FBTyxzQkFBWSxDQUFDVSxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdENQLFlBQVFJLEtBQVIsRUFBZUksSUFBZixDQUFvQixNQUFNO0FBQ3hCSixZQUFNVixPQUFOO0FBQ0FZO0FBQ0QsS0FIRCxFQUdHRyxLQUhILENBR1VDLEdBQUQsSUFBUztBQUNoQk4sWUFBTVQsSUFBTjtBQUNBLFVBQUlHLFNBQVNPLFdBQWIsRUFBMEI7QUFDeEIsWUFBSUssT0FBT0EsSUFBSUMsT0FBWCxJQUFzQkQsSUFBSUUsS0FBOUIsRUFBcUM7QUFDbkNDLGtCQUFRQyxLQUFSLENBQWMsa0RBQWtEQyxHQUFoRTtBQUNBRixrQkFBUUMsS0FBUixDQUFjLGlCQUFPQyxHQUFQLENBQVdMLElBQUlDLE9BQWYsQ0FBZDtBQUNBRSxrQkFBUUMsS0FBUixDQUFjLGlCQUFPQyxHQUFQLENBQVdMLElBQUlFLEtBQWYsQ0FBZDtBQUNELFNBSkQsTUFJTztBQUNMQyxrQkFBUUMsS0FBUixDQUFjLG1DQUFtQ0MsR0FBakQ7QUFDQUYsa0JBQVFDLEtBQVIsQ0FBYyxpQkFBT0MsR0FBUCxDQUFXLE9BQU9MLEdBQVAsS0FBZSxRQUFmLEdBQTBCQSxHQUExQixHQUFnQyx5QkFBZUEsR0FBZixDQUEzQyxDQUFkO0FBQ0Q7QUFDRFQsc0JBQWMsQ0FBZDtBQUNBO0FBQ0E7QUFDQWUsbUJBQVcsTUFBTVYsU0FBakIsRUFBNEIsR0FBNUI7QUFDRCxPQWJELE1BYU87QUFDTEMsZUFBT0csR0FBUDtBQUNEO0FBQ0YsS0FyQkQ7QUFzQkQsR0F2Qk0sQ0FBUDtBQXdCRCxDQTdCRDs7QUErQkFaLFNBQVNPLFdBQVQsR0FBdUIsSUFBdkI7O2tCQUVlUCxRIiwiZmlsZSI6InV0aWwvb3JhLWhhbmRsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gJ2NvbG9ycyc7XG5pbXBvcnQgb3JhIGZyb20gJy4vb3JhJztcblxuY2xhc3MgTW9ja09yYSB7XG4gIHN1Y2NlZWQoKSB7IHJldHVybiB0aGlzOyB9XG4gIGZhaWwoKSB7IHJldHVybiB0aGlzOyB9XG4gIHN0YXJ0KCkgeyByZXR1cm4gdGhpczsgfVxuICBzdG9wKCkgeyByZXR1cm4gdGhpczsgfVxufVxuXG5jb25zdCBhc3luY09yYSA9IChpbml0aWFsT3JhVmFsdWUsIGFzeW5jRm4sIHByb2Nlc3NFeGl0Rm4gPSBwcm9jZXNzLmV4aXQpID0+IHtcbiAgbGV0IGZuT3JhID0gbmV3IE1vY2tPcmEoKTtcbiAgaWYgKGFzeW5jT3JhLmludGVyYWN0aXZlKSB7XG4gICAgZm5PcmEgPSBvcmEoaW5pdGlhbE9yYVZhbHVlKS5zdGFydCgpO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXN5bmNGbihmbk9yYSkudGhlbigoKSA9PiB7XG4gICAgICBmbk9yYS5zdWNjZWVkKCk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgZm5PcmEuZmFpbCgpO1xuICAgICAgaWYgKGFzeW5jT3JhLmludGVyYWN0aXZlKSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UgJiYgZXJyLnN0YWNrKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignXFxuQW4gdW5oYW5kbGVkIGVycm9yIGhhcyBvY2N1cnJlZCBpbnNpZGUgRm9yZ2U6Jy5yZWQpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY29sb3JzLnJlZChlcnIubWVzc2FnZSkpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY29sb3JzLnJlZChlcnIuc3RhY2spKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdcXG5FbGVjdHJvbiBmb3JnZSB3YXMgdGVybWluYXRlZDonLnJlZCk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihjb2xvcnMucmVkKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogSlNPTi5zdHJpbmdpZnkoZXJyKSkpO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NFeGl0Rm4oMSk7XG4gICAgICAgIC8vIElmIHRoZSBwcm9jZXNzIGlzIHN0aWxsIGFsaXZlIHdlIHNob3VsZCBjb250aW51ZSBiZWNhdXNlIGVpdGhlciBzb21ldGhpbmcgd2VudCByZWFsbHkgd3JvbmdcbiAgICAgICAgLy8gb3Igd2UgYXJlIHRlc3RpbmcgdGhpcyBmdW5jdGlvblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSwgNTAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbmFzeW5jT3JhLmludGVyYWN0aXZlID0gdHJ1ZTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmNPcmE7XG4iXX0=