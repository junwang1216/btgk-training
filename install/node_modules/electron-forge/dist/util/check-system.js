'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _bluebird = require('bluebird');

let checkGitExists = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return new _promise2.default(function (resolve) {
      (0, _child_process.exec)('git --version', function (err) {
        if (err) return resolve(false);
        resolve(true);
      });
    });
  });

  return function checkGitExists() {
    return _ref.apply(this, arguments);
  };
})();

let checkNodeVersion = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* () {
    return _promise2.default.resolve(_semver2.default.gt(process.versions.node, '6.0.0'));
  });

  return function checkNodeVersion() {
    return _ref2.apply(this, arguments);
  };
})();

let checkPackageManagerVersion = (() => {
  var _ref3 = (0, _bluebird.coroutine)(function* (ora) {
    return (0, _yarnOrNpm.yarnOrNpmSpawn)(['--version']).then(function (version) {
      if ((0, _yarnOrNpm.hasYarn)()) {
        warnIfPackageManagerIsntAKnownGoodVersion('Yarn', version, YARN_WHITELISTED_VERSIONS, ora);
      } else {
        warnIfPackageManagerIsntAKnownGoodVersion('NPM', version, NPM_WHITELISTED_VERSIONS, ora);
      }

      return true;
    });
  });

  return function checkPackageManagerVersion(_x) {
    return _ref3.apply(this, arguments);
  };
})();

exports.validPackageManagerVersion = validPackageManagerVersion;

var _child_process = require('child_process');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _yarnOrNpm = require('./yarn-or-npm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:check-system');

const NPM_WHITELISTED_VERSIONS = {
  all: '^3.0.0 || ^4.0.0 || ~5.1.0 || ~5.2.0 || >= 5.4.2',
  darwin: '>= 5.4.0',
  linux: '>= 5.4.0'
};
const YARN_WHITELISTED_VERSIONS = {
  all: '0.23.3 || 0.24.6 || >= 1.0.0',
  darwin: '0.27.5',
  linux: '0.27.5'
};

function validPackageManagerVersion(packageManager, version, whitelistedVersions, ora) {
  try {
    return _semver2.default.satisfies(version, whitelistedVersions);
  } catch (e) {
    ora.warn(`Could not check ${packageManager} version "${version}", assuming incompatible`);
    d(`Exception while checking version: ${e}`);
    return false;
  }
}

function warnIfPackageManagerIsntAKnownGoodVersion(packageManager, version, whitelistedVersions, ora) {
  const osVersions = whitelistedVersions[process.platform];
  const versions = osVersions ? `${whitelistedVersions.all} || ${osVersions}` : whitelistedVersions.all;
  const versionString = version.toString();
  if (!validPackageManagerVersion(packageManager, versionString, versions, ora)) {
    ora.warn(`You are using ${packageManager}, but not a known good version.\n` + `The known versions that work with Electron Forge are: ${versions}`);
  }
}

exports.default = (() => {
  var _ref4 = (0, _bluebird.coroutine)(function* (ora) {
    return (yield _promise2.default.all([checkGitExists(ora), checkNodeVersion(ora), checkPackageManagerVersion(ora)])).every(function (check) {
      return check;
    });
  });

  return function (_x2) {
    return _ref4.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY2hlY2stc3lzdGVtLmpzIl0sIm5hbWVzIjpbInJlc29sdmUiLCJlcnIiLCJjaGVja0dpdEV4aXN0cyIsImd0IiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSIsImNoZWNrTm9kZVZlcnNpb24iLCJvcmEiLCJ0aGVuIiwidmVyc2lvbiIsIndhcm5JZlBhY2thZ2VNYW5hZ2VySXNudEFLbm93bkdvb2RWZXJzaW9uIiwiWUFSTl9XSElURUxJU1RFRF9WRVJTSU9OUyIsIk5QTV9XSElURUxJU1RFRF9WRVJTSU9OUyIsImNoZWNrUGFja2FnZU1hbmFnZXJWZXJzaW9uIiwidmFsaWRQYWNrYWdlTWFuYWdlclZlcnNpb24iLCJkIiwiYWxsIiwiZGFyd2luIiwibGludXgiLCJwYWNrYWdlTWFuYWdlciIsIndoaXRlbGlzdGVkVmVyc2lvbnMiLCJzYXRpc2ZpZXMiLCJlIiwid2FybiIsIm9zVmVyc2lvbnMiLCJwbGF0Zm9ybSIsInZlcnNpb25TdHJpbmciLCJ0b1N0cmluZyIsImV2ZXJ5IiwiY2hlY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7c0NBUUEsYUFBZ0M7QUFDOUIsV0FBTyxzQkFBWSxVQUFDQSxPQUFELEVBQWE7QUFDOUIsK0JBQUssZUFBTCxFQUFzQixVQUFDQyxHQUFELEVBQVM7QUFDN0IsWUFBSUEsR0FBSixFQUFTLE9BQU9ELFFBQVEsS0FBUixDQUFQO0FBQ1RBLGdCQUFRLElBQVI7QUFDRCxPQUhEO0FBSUQsS0FMTSxDQUFQO0FBTUQsRzs7a0JBUGNFLGM7Ozs7Ozt1Q0FTZixhQUFrQztBQUNoQyxXQUFPLGtCQUFRRixPQUFSLENBQWdCLGlCQUFPRyxFQUFQLENBQVVDLFFBQVFDLFFBQVIsQ0FBaUJDLElBQTNCLEVBQWlDLE9BQWpDLENBQWhCLENBQVA7QUFDRCxHOztrQkFGY0MsZ0I7Ozs7Ozt1Q0FxQ2YsV0FBMENDLEdBQTFDLEVBQStDO0FBQzdDLFdBQU8sK0JBQWUsQ0FBQyxXQUFELENBQWYsRUFDSkMsSUFESSxDQUNDLFVBQUNDLE9BQUQsRUFBYTtBQUNqQixVQUFJLHlCQUFKLEVBQWU7QUFDYkMsa0RBQTBDLE1BQTFDLEVBQWtERCxPQUFsRCxFQUEyREUseUJBQTNELEVBQXNGSixHQUF0RjtBQUNELE9BRkQsTUFFTztBQUNMRyxrREFBMEMsS0FBMUMsRUFBaURELE9BQWpELEVBQTBERyx3QkFBMUQsRUFBb0ZMLEdBQXBGO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0QsS0FUSSxDQUFQO0FBVUQsRzs7a0JBWGNNLDBCOzs7OztRQXRCQ0MsMEIsR0FBQUEsMEI7O0FBaENoQjs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQSxNQUFNQyxJQUFJLHFCQUFNLDZCQUFOLENBQVY7O0FBZUEsTUFBTUgsMkJBQTJCO0FBQy9CSSxPQUFLLGtEQUQwQjtBQUUvQkMsVUFBUSxVQUZ1QjtBQUcvQkMsU0FBTztBQUh3QixDQUFqQztBQUtBLE1BQU1QLDRCQUE0QjtBQUNoQ0ssT0FBSyw4QkFEMkI7QUFFaENDLFVBQVEsUUFGd0I7QUFHaENDLFNBQU87QUFIeUIsQ0FBbEM7O0FBTU8sU0FBU0osMEJBQVQsQ0FBb0NLLGNBQXBDLEVBQW9EVixPQUFwRCxFQUE2RFcsbUJBQTdELEVBQWtGYixHQUFsRixFQUF1RjtBQUM1RixNQUFJO0FBQ0YsV0FBTyxpQkFBT2MsU0FBUCxDQUFpQlosT0FBakIsRUFBMEJXLG1CQUExQixDQUFQO0FBQ0QsR0FGRCxDQUVFLE9BQU9FLENBQVAsRUFBVTtBQUNWZixRQUFJZ0IsSUFBSixDQUFVLG1CQUFrQkosY0FBZSxhQUFZVixPQUFRLDBCQUEvRDtBQUNBTSxNQUFHLHFDQUFvQ08sQ0FBRSxFQUF6QztBQUNBLFdBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU1oseUNBQVQsQ0FBbURTLGNBQW5ELEVBQW1FVixPQUFuRSxFQUE0RVcsbUJBQTVFLEVBQWlHYixHQUFqRyxFQUFzRztBQUNwRyxRQUFNaUIsYUFBYUosb0JBQW9CakIsUUFBUXNCLFFBQTVCLENBQW5CO0FBQ0EsUUFBTXJCLFdBQVdvQixhQUFjLEdBQUVKLG9CQUFvQkosR0FBSSxPQUFNUSxVQUFXLEVBQXpELEdBQTZESixvQkFBb0JKLEdBQWxHO0FBQ0EsUUFBTVUsZ0JBQWdCakIsUUFBUWtCLFFBQVIsRUFBdEI7QUFDQSxNQUFJLENBQUNiLDJCQUEyQkssY0FBM0IsRUFBMkNPLGFBQTNDLEVBQTBEdEIsUUFBMUQsRUFBb0VHLEdBQXBFLENBQUwsRUFBK0U7QUFDN0VBLFFBQUlnQixJQUFKLENBQ0csaUJBQWdCSixjQUFlLG1DQUFoQyxHQUNDLHlEQUF3RGYsUUFBUyxFQUZwRTtBQUlEO0FBQ0Y7Ozt1Q0FlYyxXQUFnQkcsR0FBaEIsRUFBcUI7QUFDbEMsV0FBTyxDQUFDLE1BQU0sa0JBQVFTLEdBQVIsQ0FBWSxDQUFDZixlQUFlTSxHQUFmLENBQUQsRUFBc0JELGlCQUFpQkMsR0FBakIsQ0FBdEIsRUFBNkNNLDJCQUEyQk4sR0FBM0IsQ0FBN0MsQ0FBWixDQUFQLEVBQ0pxQixLQURJLENBQ0U7QUFBQSxhQUFTQyxLQUFUO0FBQUEsS0FERixDQUFQO0FBRUQsRyIsImZpbGUiOiJ1dGlsL2NoZWNrLXN5c3RlbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7IGhhc1lhcm4sIHlhcm5Pck5wbVNwYXduIH0gZnJvbSAnLi95YXJuLW9yLW5wbSc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6Y2hlY2stc3lzdGVtJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrR2l0RXhpc3RzKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBleGVjKCdnaXQgLS12ZXJzaW9uJywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIHJlc29sdmUoZmFsc2UpO1xuICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrTm9kZVZlcnNpb24oKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2VtdmVyLmd0KHByb2Nlc3MudmVyc2lvbnMubm9kZSwgJzYuMC4wJykpO1xufVxuXG5jb25zdCBOUE1fV0hJVEVMSVNURURfVkVSU0lPTlMgPSB7XG4gIGFsbDogJ14zLjAuMCB8fCBeNC4wLjAgfHwgfjUuMS4wIHx8IH41LjIuMCB8fCA+PSA1LjQuMicsXG4gIGRhcndpbjogJz49IDUuNC4wJyxcbiAgbGludXg6ICc+PSA1LjQuMCcsXG59O1xuY29uc3QgWUFSTl9XSElURUxJU1RFRF9WRVJTSU9OUyA9IHtcbiAgYWxsOiAnMC4yMy4zIHx8IDAuMjQuNiB8fCA+PSAxLjAuMCcsXG4gIGRhcndpbjogJzAuMjcuNScsXG4gIGxpbnV4OiAnMC4yNy41Jyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZFBhY2thZ2VNYW5hZ2VyVmVyc2lvbihwYWNrYWdlTWFuYWdlciwgdmVyc2lvbiwgd2hpdGVsaXN0ZWRWZXJzaW9ucywgb3JhKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHNlbXZlci5zYXRpc2ZpZXModmVyc2lvbiwgd2hpdGVsaXN0ZWRWZXJzaW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvcmEud2FybihgQ291bGQgbm90IGNoZWNrICR7cGFja2FnZU1hbmFnZXJ9IHZlcnNpb24gXCIke3ZlcnNpb259XCIsIGFzc3VtaW5nIGluY29tcGF0aWJsZWApO1xuICAgIGQoYEV4Y2VwdGlvbiB3aGlsZSBjaGVja2luZyB2ZXJzaW9uOiAke2V9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlBhY2thZ2VNYW5hZ2VySXNudEFLbm93bkdvb2RWZXJzaW9uKHBhY2thZ2VNYW5hZ2VyLCB2ZXJzaW9uLCB3aGl0ZWxpc3RlZFZlcnNpb25zLCBvcmEpIHtcbiAgY29uc3Qgb3NWZXJzaW9ucyA9IHdoaXRlbGlzdGVkVmVyc2lvbnNbcHJvY2Vzcy5wbGF0Zm9ybV07XG4gIGNvbnN0IHZlcnNpb25zID0gb3NWZXJzaW9ucyA/IGAke3doaXRlbGlzdGVkVmVyc2lvbnMuYWxsfSB8fCAke29zVmVyc2lvbnN9YCA6IHdoaXRlbGlzdGVkVmVyc2lvbnMuYWxsO1xuICBjb25zdCB2ZXJzaW9uU3RyaW5nID0gdmVyc2lvbi50b1N0cmluZygpO1xuICBpZiAoIXZhbGlkUGFja2FnZU1hbmFnZXJWZXJzaW9uKHBhY2thZ2VNYW5hZ2VyLCB2ZXJzaW9uU3RyaW5nLCB2ZXJzaW9ucywgb3JhKSkge1xuICAgIG9yYS53YXJuKFxuICAgICAgYFlvdSBhcmUgdXNpbmcgJHtwYWNrYWdlTWFuYWdlcn0sIGJ1dCBub3QgYSBrbm93biBnb29kIHZlcnNpb24uXFxuYCArXG4gICAgICBgVGhlIGtub3duIHZlcnNpb25zIHRoYXQgd29yayB3aXRoIEVsZWN0cm9uIEZvcmdlIGFyZTogJHt2ZXJzaW9uc31gXG4gICAgKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja1BhY2thZ2VNYW5hZ2VyVmVyc2lvbihvcmEpIHtcbiAgcmV0dXJuIHlhcm5Pck5wbVNwYXduKFsnLS12ZXJzaW9uJ10pXG4gICAgLnRoZW4oKHZlcnNpb24pID0+IHtcbiAgICAgIGlmIChoYXNZYXJuKCkpIHtcbiAgICAgICAgd2FybklmUGFja2FnZU1hbmFnZXJJc250QUtub3duR29vZFZlcnNpb24oJ1lhcm4nLCB2ZXJzaW9uLCBZQVJOX1dISVRFTElTVEVEX1ZFUlNJT05TLCBvcmEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybklmUGFja2FnZU1hbmFnZXJJc250QUtub3duR29vZFZlcnNpb24oJ05QTScsIHZlcnNpb24sIE5QTV9XSElURUxJU1RFRF9WRVJTSU9OUywgb3JhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChvcmEpIHtcbiAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbY2hlY2tHaXRFeGlzdHMob3JhKSwgY2hlY2tOb2RlVmVyc2lvbihvcmEpLCBjaGVja1BhY2thZ2VNYW5hZ2VyVmVyc2lvbihvcmEpXSkpXG4gICAgLmV2ZXJ5KGNoZWNrID0+IGNoZWNrKTtcbn1cbiJdfQ==