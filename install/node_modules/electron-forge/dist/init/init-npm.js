'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.airbnbDeps = exports.standardDeps = exports.exactDevDeps = exports.devDeps = exports.deps = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _bluebird = require('bluebird');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _username = require('username');

var _username2 = _interopRequireDefault(_username);

var _forgeConfig = require('../util/forge-config');

var _installDependencies = require('../util/install-dependencies');

var _installDependencies2 = _interopRequireDefault(_installDependencies);

var _readPackageJson = require('../util/read-package-json');

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:init:npm');

const deps = exports.deps = ['electron-compile', 'electron-squirrel-startup'];
const devDeps = exports.devDeps = ['babel-preset-env', 'babel-preset-react', 'babel-plugin-transform-async-to-generator', 'electron-forge'];
const exactDevDeps = exports.exactDevDeps = ['electron-prebuilt-compile'];
const standardDeps = exports.standardDeps = ['standard'];
const airbnbDeps = exports.airbnbDeps = ['eslint@^3', 'eslint-config-airbnb@^15', 'eslint-plugin-import@^2', 'eslint-plugin-jsx-a11y@^5', 'eslint-plugin-react@^7'];

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (dir, lintStyle) {
    yield (0, _oraHandler2.default)('Initializing NPM Module', (0, _bluebird.coroutine)(function* () {
      const packageJSON = yield (0, _readPackageJson2.default)(_path2.default.resolve(__dirname, '../../tmpl'));
      packageJSON.productName = packageJSON.name = _path2.default.basename(dir).toLowerCase();
      packageJSON.author = yield (0, _username2.default)();
      (0, _forgeConfig.setInitialForgeConfig)(packageJSON);

      switch (lintStyle) {
        case 'standard':
          packageJSON.scripts.lint = 'standard';
          break;
        case 'airbnb':
          packageJSON.scripts.lint = 'eslint src --color';
          break;
        default:
          packageJSON.scripts.lint = 'echo "No linting configured"';
          break;
      }
      d('writing package.json to:', dir);
      yield _fsExtra2.default.writeJson(_path2.default.resolve(dir, 'package.json'), packageJSON, { spaces: 2 });
    }));

    yield (0, _oraHandler2.default)('Installing NPM Dependencies', (0, _bluebird.coroutine)(function* () {
      d('installing dependencies');
      yield (0, _installDependencies2.default)(dir, deps);

      d('installing devDependencies');
      yield (0, _installDependencies2.default)(dir, devDeps, true);

      d('installing exact dependencies');
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(exactDevDeps), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const packageName = _step.value;

          yield (0, _installDependencies2.default)(dir, [packageName], true, true);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      switch (lintStyle) {
        case 'standard':
          d('installing standard linting dependencies');
          yield (0, _installDependencies2.default)(dir, standardDeps, true);
          break;
        case 'airbnb':
          d('installing airbnb linting dependencies');
          yield (0, _installDependencies2.default)(dir, airbnbDeps, true);
          break;
        default:
          d('not installing linting deps');
          break;
      }

      // NB: For babel-preset-env to work correctly, it needs to know the
      // actual version of Electron that we installed
      const content = yield _fsExtra2.default.readJson(_path2.default.join(dir, '.compilerc'), 'utf8');
      const electronPrebuilt = require(_path2.default.join(dir, 'node_modules', 'electron-prebuilt-compile', 'package.json'));

      var _arr = ['development', 'production'];
      for (var _i = 0; _i < _arr.length; _i++) {
        const profile = _arr[_i];
        const envTarget = content.env[profile]['application/javascript'].presets.find(function (x) {
          return x[0] === 'env';
        });
        // parseFloat strips the patch version
        // parseFloat('1.3.2') === 1.3
        envTarget[1].targets.electron = parseFloat(electronPrebuilt.version).toString();
      }

      yield _fsExtra2.default.writeJson(_path2.default.join(dir, '.compilerc'), content, { spaces: 2 });
    }));
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,