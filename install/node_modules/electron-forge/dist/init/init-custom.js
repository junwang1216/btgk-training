'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _bluebird = require('bluebird');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _resolvePackage = require('resolve-package');

var _resolvePackage2 = _interopRequireDefault(_resolvePackage);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _initStarterFiles = require('./init-starter-files');

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

var _installDependencies = require('../util/install-dependencies');

var _installDependencies2 = _interopRequireDefault(_installDependencies);

var _ora = require('../util/ora');

var _ora2 = _interopRequireDefault(_ora);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:init:custom');

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (dir, template, lintStyle) {
    let templateModulePath;
    yield (0, _oraHandler2.default)(`Locating custom template: "${template}"`, (0, _bluebird.coroutine)(function* () {
      try {
        templateModulePath = yield (0, _resolvePackage2.default)(`electron-forge-template-${template}`);
        d('using global template');
      } catch (err) {
        try {
          templateModulePath = require.resolve(`electron-forge-template-${template}`);
          d('using local template');
        } catch (err2) {
          throw `Failed to locate custom template: "${template}"\n\nTry \`npm install -g electron-forge-template-${template}\``;
        }
      }
    }));

    let templateModule = require(templateModulePath);

    templateModule = templateModule.default || templateModule;

    yield (0, _oraHandler2.default)('Installing Template Dependencies', (0, _bluebird.coroutine)(function* () {
      d('installing dependencies');
      yield (0, _installDependencies2.default)(dir, templateModule.dependencies || []);
      d('installing devDependencies');
      yield (0, _installDependencies2.default)(dir, templateModule.devDependencies || [], true);
    }));

    yield (0, _oraHandler2.default)('Copying Template Files', (0, _bluebird.coroutine)(function* () {
      const templateDirectory = templateModule.templateDirectory;
      if (templateDirectory) {
        const tmplPath = templateDirectory;
        if (!_path2.default.isAbsolute(templateDirectory)) {
          throw `Custom template path needs to be absolute, this is an issue with "electron-forge-template-${template}"`;
        }

        const files = _glob2.default.sync(_path2.default.resolve(tmplPath, '**/*'));

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3.default)(files), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            const file = _step.value;

            if ((yield _fsExtra2.default.stat(file)).isFile()) {
              yield (0, _initStarterFiles.copy)(file, _path2.default.resolve(dir, _path2.default.relative(tmplPath, file).replace(/^_/, '.')));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }));

    if (typeof templateModule.postCopy === 'function') {
      yield _promise2.default.resolve(templateModule.postCopy(dir, _ora2.default, lintStyle));
    }
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaXQvaW5pdC1jdXN0b20uanMiXSwibmFtZXMiOlsiZCIsImRpciIsInRlbXBsYXRlIiwibGludFN0eWxlIiwidGVtcGxhdGVNb2R1bGVQYXRoIiwiZXJyIiwicmVxdWlyZSIsInJlc29sdmUiLCJlcnIyIiwidGVtcGxhdGVNb2R1bGUiLCJkZWZhdWx0IiwiZGVwZW5kZW5jaWVzIiwiZGV2RGVwZW5kZW5jaWVzIiwidGVtcGxhdGVEaXJlY3RvcnkiLCJ0bXBsUGF0aCIsImlzQWJzb2x1dGUiLCJmaWxlcyIsInN5bmMiLCJmaWxlIiwic3RhdCIsImlzRmlsZSIsInJlbGF0aXZlIiwicmVwbGFjZSIsInBvc3RDb3B5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsSUFBSSxxQkFBTSw0QkFBTixDQUFWOzs7c0NBRWUsV0FBT0MsR0FBUCxFQUFZQyxRQUFaLEVBQXNCQyxTQUF0QixFQUFvQztBQUNqRCxRQUFJQyxrQkFBSjtBQUNBLFVBQU0sMEJBQVUsOEJBQTZCRixRQUFTLEdBQWhELDJCQUFvRCxhQUFZO0FBQ3BFLFVBQUk7QUFDRkUsNkJBQXFCLE1BQU0sOEJBQWdCLDJCQUEwQkYsUUFBUyxFQUFuRCxDQUEzQjtBQUNBRixVQUFFLHVCQUFGO0FBQ0QsT0FIRCxDQUdFLE9BQU9LLEdBQVAsRUFBWTtBQUNaLFlBQUk7QUFDRkQsK0JBQXFCRSxRQUFRQyxPQUFSLENBQWlCLDJCQUEwQkwsUUFBUyxFQUFwRCxDQUFyQjtBQUNBRixZQUFFLHNCQUFGO0FBQ0QsU0FIRCxDQUdFLE9BQU9RLElBQVAsRUFBYTtBQUNiLGdCQUFPLHNDQUFxQ04sUUFBUyxxREFBb0RBLFFBQVMsSUFBbEg7QUFDRDtBQUNGO0FBQ0YsS0FaSyxFQUFOOztBQWNBLFFBQUlPLGlCQUFpQkgsUUFBUUYsa0JBQVIsQ0FBckI7O0FBRUFLLHFCQUFpQkEsZUFBZUMsT0FBZixJQUEwQkQsY0FBM0M7O0FBRUEsVUFBTSwwQkFBUyxrQ0FBVCwyQkFBNkMsYUFBWTtBQUM3RFQsUUFBRSx5QkFBRjtBQUNBLFlBQU0sbUNBQWVDLEdBQWYsRUFBb0JRLGVBQWVFLFlBQWYsSUFBK0IsRUFBbkQsQ0FBTjtBQUNBWCxRQUFFLDRCQUFGO0FBQ0EsWUFBTSxtQ0FBZUMsR0FBZixFQUFvQlEsZUFBZUcsZUFBZixJQUFrQyxFQUF0RCxFQUEwRCxJQUExRCxDQUFOO0FBQ0QsS0FMSyxFQUFOOztBQU9BLFVBQU0sMEJBQVMsd0JBQVQsMkJBQW1DLGFBQVk7QUFDbkQsWUFBTUMsb0JBQW9CSixlQUFlSSxpQkFBekM7QUFDQSxVQUFJQSxpQkFBSixFQUF1QjtBQUNyQixjQUFNQyxXQUFXRCxpQkFBakI7QUFDQSxZQUFJLENBQUMsZUFBS0UsVUFBTCxDQUFnQkYsaUJBQWhCLENBQUwsRUFBeUM7QUFDdkMsZ0JBQU8sNkZBQTRGWCxRQUFTLEdBQTVHO0FBQ0Q7O0FBRUQsY0FBTWMsUUFBUSxlQUFLQyxJQUFMLENBQVUsZUFBS1YsT0FBTCxDQUFhTyxRQUFiLEVBQXVCLE1BQXZCLENBQVYsQ0FBZDs7QUFOcUI7QUFBQTtBQUFBOztBQUFBO0FBUXJCLDBEQUFtQkUsS0FBbkIsNEdBQTBCO0FBQUEsa0JBQWZFLElBQWU7O0FBQ3hCLGdCQUFJLENBQUMsTUFBTSxrQkFBR0MsSUFBSCxDQUFRRCxJQUFSLENBQVAsRUFBc0JFLE1BQXRCLEVBQUosRUFBb0M7QUFDbEMsb0JBQU0sNEJBQUtGLElBQUwsRUFBVyxlQUFLWCxPQUFMLENBQWFOLEdBQWIsRUFBa0IsZUFBS29CLFFBQUwsQ0FBY1AsUUFBZCxFQUF3QkksSUFBeEIsRUFBOEJJLE9BQTlCLENBQXNDLElBQXRDLEVBQTRDLEdBQTVDLENBQWxCLENBQVgsQ0FBTjtBQUNEO0FBQ0Y7QUFab0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWF0QjtBQUNGLEtBaEJLLEVBQU47O0FBa0JBLFFBQUksT0FBT2IsZUFBZWMsUUFBdEIsS0FBbUMsVUFBdkMsRUFBbUQ7QUFDakQsWUFBTSxrQkFBUWhCLE9BQVIsQ0FBZ0JFLGVBQWVjLFFBQWYsQ0FBd0J0QixHQUF4QixpQkFBa0NFLFNBQWxDLENBQWhCLENBQU47QUFDRDtBQUNGLEciLCJmaWxlIjoiaW5pdC9pbml0LWN1c3RvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IGdsb2IgZnJvbSAnZ2xvYic7XG5pbXBvcnQgcmVzb2x2ZVBhY2thZ2UgZnJvbSAncmVzb2x2ZS1wYWNrYWdlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBjb3B5IH0gZnJvbSAnLi9pbml0LXN0YXJ0ZXItZmlsZXMnO1xuaW1wb3J0IGFzeW5jT3JhIGZyb20gJy4uL3V0aWwvb3JhLWhhbmRsZXInO1xuaW1wb3J0IGluc3RhbGxEZXBMaXN0IGZyb20gJy4uL3V0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IG9yYSBmcm9tICcuLi91dGlsL29yYSc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdDpjdXN0b20nKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGRpciwgdGVtcGxhdGUsIGxpbnRTdHlsZSkgPT4ge1xuICBsZXQgdGVtcGxhdGVNb2R1bGVQYXRoO1xuICBhd2FpdCBhc3luY09yYShgTG9jYXRpbmcgY3VzdG9tIHRlbXBsYXRlOiBcIiR7dGVtcGxhdGV9XCJgLCBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHRlbXBsYXRlTW9kdWxlUGF0aCA9IGF3YWl0IHJlc29sdmVQYWNrYWdlKGBlbGVjdHJvbi1mb3JnZS10ZW1wbGF0ZS0ke3RlbXBsYXRlfWApO1xuICAgICAgZCgndXNpbmcgZ2xvYmFsIHRlbXBsYXRlJyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUoYGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9YCk7XG4gICAgICAgIGQoJ3VzaW5nIGxvY2FsIHRlbXBsYXRlJyk7XG4gICAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICAgIHRocm93IGBGYWlsZWQgdG8gbG9jYXRlIGN1c3RvbSB0ZW1wbGF0ZTogXCIke3RlbXBsYXRlfVwiXFxuXFxuVHJ5IFxcYG5wbSBpbnN0YWxsIC1nIGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9XFxgYDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGxldCB0ZW1wbGF0ZU1vZHVsZSA9IHJlcXVpcmUodGVtcGxhdGVNb2R1bGVQYXRoKTtcblxuICB0ZW1wbGF0ZU1vZHVsZSA9IHRlbXBsYXRlTW9kdWxlLmRlZmF1bHQgfHwgdGVtcGxhdGVNb2R1bGU7XG5cbiAgYXdhaXQgYXN5bmNPcmEoJ0luc3RhbGxpbmcgVGVtcGxhdGUgRGVwZW5kZW5jaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGQoJ2luc3RhbGxpbmcgZGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCB0ZW1wbGF0ZU1vZHVsZS5kZXBlbmRlbmNpZXMgfHwgW10pO1xuICAgIGQoJ2luc3RhbGxpbmcgZGV2RGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCB0ZW1wbGF0ZU1vZHVsZS5kZXZEZXBlbmRlbmNpZXMgfHwgW10sIHRydWUpO1xuICB9KTtcblxuICBhd2FpdCBhc3luY09yYSgnQ29weWluZyBUZW1wbGF0ZSBGaWxlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0ZW1wbGF0ZURpcmVjdG9yeSA9IHRlbXBsYXRlTW9kdWxlLnRlbXBsYXRlRGlyZWN0b3J5O1xuICAgIGlmICh0ZW1wbGF0ZURpcmVjdG9yeSkge1xuICAgICAgY29uc3QgdG1wbFBhdGggPSB0ZW1wbGF0ZURpcmVjdG9yeTtcbiAgICAgIGlmICghcGF0aC5pc0Fic29sdXRlKHRlbXBsYXRlRGlyZWN0b3J5KSkge1xuICAgICAgICB0aHJvdyBgQ3VzdG9tIHRlbXBsYXRlIHBhdGggbmVlZHMgdG8gYmUgYWJzb2x1dGUsIHRoaXMgaXMgYW4gaXNzdWUgd2l0aCBcImVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9XCJgO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaWxlcyA9IGdsb2Iuc3luYyhwYXRoLnJlc29sdmUodG1wbFBhdGgsICcqKi8qJykpO1xuXG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgaWYgKChhd2FpdCBmcy5zdGF0KGZpbGUpKS5pc0ZpbGUoKSkge1xuICAgICAgICAgIGF3YWl0IGNvcHkoZmlsZSwgcGF0aC5yZXNvbHZlKGRpciwgcGF0aC5yZWxhdGl2ZSh0bXBsUGF0aCwgZmlsZSkucmVwbGFjZSgvXl8vLCAnLicpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmICh0eXBlb2YgdGVtcGxhdGVNb2R1bGUucG9zdENvcHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUodGVtcGxhdGVNb2R1bGUucG9zdENvcHkoZGlyLCBvcmEsIGxpbnRTdHlsZSkpO1xuICB9XG59O1xuIl19