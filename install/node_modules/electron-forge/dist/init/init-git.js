'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _bluebird = require('bluebird');

var _child_process = require('child_process');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:init:git');

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (dir) {
    yield (0, _oraHandler2.default)('Initializing Git Repository', (0, _bluebird.coroutine)(function* () {
      yield new _promise2.default((() => {
        var _ref3 = (0, _bluebird.coroutine)(function* (resolve, reject) {
          if (yield _fsExtra2.default.pathExists(_path2.default.resolve(dir, '.git'))) {
            d('.git directory already exists, skipping git initialization');
            return resolve();
          }
          d('executing "git init" in directory:', dir);
          (0, _child_process.exec)('git init', {
            cwd: dir
          }, function (err) {
            if (err) return reject(err);
            resolve();
          });
        });

        return function (_x2, _x3) {
          return _ref3.apply(this, arguments);
        };
      })());
    }));
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaXQvaW5pdC1naXQuanMiXSwibmFtZXMiOlsiZCIsImRpciIsInJlc29sdmUiLCJyZWplY3QiLCJwYXRoRXhpc3RzIiwiY3dkIiwiZXJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUEsTUFBTUEsSUFBSSxxQkFBTSx5QkFBTixDQUFWOzs7c0NBRWUsV0FBT0MsR0FBUCxFQUFlO0FBQzVCLFVBQU0sMEJBQVMsNkJBQVQsMkJBQXdDLGFBQVk7QUFDeEQsWUFBTTtBQUFBLDZDQUFZLFdBQU9DLE9BQVAsRUFBZ0JDLE1BQWhCLEVBQTJCO0FBQzNDLGNBQUksTUFBTSxrQkFBR0MsVUFBSCxDQUFjLGVBQUtGLE9BQUwsQ0FBYUQsR0FBYixFQUFrQixNQUFsQixDQUFkLENBQVYsRUFBb0Q7QUFDbERELGNBQUUsNERBQUY7QUFDQSxtQkFBT0UsU0FBUDtBQUNEO0FBQ0RGLFlBQUUsb0NBQUYsRUFBd0NDLEdBQXhDO0FBQ0EsbUNBQUssVUFBTCxFQUFpQjtBQUNmSSxpQkFBS0o7QUFEVSxXQUFqQixFQUVHLFVBQUNLLEdBQUQsRUFBUztBQUNWLGdCQUFJQSxHQUFKLEVBQVMsT0FBT0gsT0FBT0csR0FBUCxDQUFQO0FBQ1RKO0FBQ0QsV0FMRDtBQU1ELFNBWks7O0FBQUE7QUFBQTtBQUFBO0FBQUEsV0FBTjtBQWFELEtBZEssRUFBTjtBQWVELEciLCJmaWxlIjoiaW5pdC9pbml0LWdpdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCBhc3luY09yYSBmcm9tICcuLi91dGlsL29yYS1oYW5kbGVyJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbml0OmdpdCcpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyKSA9PiB7XG4gIGF3YWl0IGFzeW5jT3JhKCdJbml0aWFsaXppbmcgR2l0IFJlcG9zaXRvcnknLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKGF3YWl0IGZzLnBhdGhFeGlzdHMocGF0aC5yZXNvbHZlKGRpciwgJy5naXQnKSkpIHtcbiAgICAgICAgZCgnLmdpdCBkaXJlY3RvcnkgYWxyZWFkeSBleGlzdHMsIHNraXBwaW5nIGdpdCBpbml0aWFsaXphdGlvbicpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgZCgnZXhlY3V0aW5nIFwiZ2l0IGluaXRcIiBpbiBkaXJlY3Rvcnk6JywgZGlyKTtcbiAgICAgIGV4ZWMoJ2dpdCBpbml0Jywge1xuICAgICAgICBjd2Q6IGRpcixcbiAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuIl19