'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _ensureOutput = require('../../util/ensure-output');

var _configFn = require('../../util/config-fn');

var _configFn2 = _interopRequireDefault(_configFn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// electron-installer-dmg doesn't set its 'os' field even though it depends on
// appdmg, which is darwin-only
const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return process.platform === 'darwin';
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

exports.default = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* ({ dir, appName, targetArch, forgeConfig, packageJSON }) {
    const electronDMG = require('electron-installer-dmg');

    const userConfig = (0, _configFn2.default)(forgeConfig.electronInstallerDMG, targetArch);

    const outPath = _path2.default.resolve(dir, '../make', `${userConfig.name || appName}.dmg`);
    const wantedOutPath = _path2.default.resolve(dir, '../make', `${appName}-${packageJSON.version}.dmg`);
    yield (0, _ensureOutput.ensureFile)(outPath);
    const dmgConfig = (0, _assign2.default)({
      overwrite: true,
      name: appName
    }, userConfig, {
      appPath: _path2.default.resolve(dir, `${appName}.app`),
      out: _path2.default.dirname(outPath)
    });
    yield (0, _pify2.default)(electronDMG)(dmgConfig);
    if (!userConfig.name) {
      yield _fsExtra2.default.rename(outPath, wantedOutPath);
    }
    return [wantedOutPath];
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy9kYXJ3aW4vZG1nLmpzIl0sIm5hbWVzIjpbImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJkaXIiLCJhcHBOYW1lIiwidGFyZ2V0QXJjaCIsImZvcmdlQ29uZmlnIiwicGFja2FnZUpTT04iLCJlbGVjdHJvbkRNRyIsInJlcXVpcmUiLCJ1c2VyQ29uZmlnIiwiZWxlY3Ryb25JbnN0YWxsZXJETUciLCJvdXRQYXRoIiwicmVzb2x2ZSIsIm5hbWUiLCJ3YW50ZWRPdXRQYXRoIiwidmVyc2lvbiIsImRtZ0NvbmZpZyIsIm92ZXJ3cml0ZSIsImFwcFBhdGgiLCJvdXQiLCJkaXJuYW1lIiwicmVuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDTyxNQUFNQTtBQUFBLHNDQUErQjtBQUFBLFdBQVlDLFFBQVFDLFFBQVIsS0FBcUIsUUFBakM7QUFBQSxHQUEvQjs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOzs7dUNBRVEsV0FBTyxFQUFFQyxHQUFGLEVBQU9DLE9BQVAsRUFBZ0JDLFVBQWhCLEVBQTRCQyxXQUE1QixFQUF5Q0MsV0FBekMsRUFBUCxFQUFrRTtBQUMvRSxVQUFNQyxjQUFjQyxRQUFRLHdCQUFSLENBQXBCOztBQUVBLFVBQU1DLGFBQWEsd0JBQVNKLFlBQVlLLG9CQUFyQixFQUEyQ04sVUFBM0MsQ0FBbkI7O0FBRUEsVUFBTU8sVUFBVSxlQUFLQyxPQUFMLENBQWFWLEdBQWIsRUFBa0IsU0FBbEIsRUFBOEIsR0FBRU8sV0FBV0ksSUFBWCxJQUFtQlYsT0FBUSxNQUEzRCxDQUFoQjtBQUNBLFVBQU1XLGdCQUFnQixlQUFLRixPQUFMLENBQWFWLEdBQWIsRUFBa0IsU0FBbEIsRUFBOEIsR0FBRUMsT0FBUSxJQUFHRyxZQUFZUyxPQUFRLE1BQS9ELENBQXRCO0FBQ0EsVUFBTSw4QkFBV0osT0FBWCxDQUFOO0FBQ0EsVUFBTUssWUFBWSxzQkFBYztBQUM5QkMsaUJBQVcsSUFEbUI7QUFFOUJKLFlBQU1WO0FBRndCLEtBQWQsRUFHZk0sVUFIZSxFQUdIO0FBQ2JTLGVBQVMsZUFBS04sT0FBTCxDQUFhVixHQUFiLEVBQW1CLEdBQUVDLE9BQVEsTUFBN0IsQ0FESTtBQUViZ0IsV0FBSyxlQUFLQyxPQUFMLENBQWFULE9BQWI7QUFGUSxLQUhHLENBQWxCO0FBT0EsVUFBTSxvQkFBS0osV0FBTCxFQUFrQlMsU0FBbEIsQ0FBTjtBQUNBLFFBQUksQ0FBQ1AsV0FBV0ksSUFBaEIsRUFBc0I7QUFDcEIsWUFBTSxrQkFBR1EsTUFBSCxDQUFVVixPQUFWLEVBQW1CRyxhQUFuQixDQUFOO0FBQ0Q7QUFDRCxXQUFPLENBQUNBLGFBQUQsQ0FBUDtBQUNELEciLCJmaWxlIjoibWFrZXJzL2Rhcndpbi9kbWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcGlmeSBmcm9tICdwaWZ5JztcblxuaW1wb3J0IHsgZW5zdXJlRmlsZSB9IGZyb20gJy4uLy4uL3V0aWwvZW5zdXJlLW91dHB1dCc7XG5pbXBvcnQgY29uZmlnRm4gZnJvbSAnLi4vLi4vdXRpbC9jb25maWctZm4nO1xuXG4vLyBlbGVjdHJvbi1pbnN0YWxsZXItZG1nIGRvZXNuJ3Qgc2V0IGl0cyAnb3MnIGZpZWxkIGV2ZW4gdGhvdWdoIGl0IGRlcGVuZHMgb25cbi8vIGFwcGRtZywgd2hpY2ggaXMgZGFyd2luLW9ubHlcbmV4cG9ydCBjb25zdCBpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtID0gYXN5bmMgKCkgPT4gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2Rhcndpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh7IGRpciwgYXBwTmFtZSwgdGFyZ2V0QXJjaCwgZm9yZ2VDb25maWcsIHBhY2thZ2VKU09OIH0pID0+IHtcbiAgY29uc3QgZWxlY3Ryb25ETUcgPSByZXF1aXJlKCdlbGVjdHJvbi1pbnN0YWxsZXItZG1nJyk7XG5cbiAgY29uc3QgdXNlckNvbmZpZyA9IGNvbmZpZ0ZuKGZvcmdlQ29uZmlnLmVsZWN0cm9uSW5zdGFsbGVyRE1HLCB0YXJnZXRBcmNoKTtcblxuICBjb25zdCBvdXRQYXRoID0gcGF0aC5yZXNvbHZlKGRpciwgJy4uL21ha2UnLCBgJHt1c2VyQ29uZmlnLm5hbWUgfHwgYXBwTmFtZX0uZG1nYCk7XG4gIGNvbnN0IHdhbnRlZE91dFBhdGggPSBwYXRoLnJlc29sdmUoZGlyLCAnLi4vbWFrZScsIGAke2FwcE5hbWV9LSR7cGFja2FnZUpTT04udmVyc2lvbn0uZG1nYCk7XG4gIGF3YWl0IGVuc3VyZUZpbGUob3V0UGF0aCk7XG4gIGNvbnN0IGRtZ0NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIG92ZXJ3cml0ZTogdHJ1ZSxcbiAgICBuYW1lOiBhcHBOYW1lLFxuICB9LCB1c2VyQ29uZmlnLCB7XG4gICAgYXBwUGF0aDogcGF0aC5yZXNvbHZlKGRpciwgYCR7YXBwTmFtZX0uYXBwYCksXG4gICAgb3V0OiBwYXRoLmRpcm5hbWUob3V0UGF0aCksXG4gIH0pO1xuICBhd2FpdCBwaWZ5KGVsZWN0cm9uRE1HKShkbWdDb25maWcpO1xuICBpZiAoIXVzZXJDb25maWcubmFtZSkge1xuICAgIGF3YWl0IGZzLnJlbmFtZShvdXRQYXRoLCB3YW50ZWRPdXRQYXRoKTtcbiAgfVxuICByZXR1cm4gW3dhbnRlZE91dFBhdGhdO1xufTtcbiJdfQ==