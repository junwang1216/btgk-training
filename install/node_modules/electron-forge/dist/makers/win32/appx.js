'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDefaultCertificate = exports.isSupportedOnCurrentPlatform = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

let createDefaultCertificate = exports.createDefaultCertificate = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* (publisherName, { certFilePath, certFileName, install, program }) {
    const makeCertOptions = {
      publisherName,
      certFilePath: certFilePath || process.cwd(),
      certFileName: certFileName || 'default',
      install: typeof install === 'boolean' ? install : false,
      program: program || { windowsKit: _path2.default.dirname(findSdkTool('makecert.exe')) }
    };

    if (!(0, _sign.isValidPublisherName)(publisherName)) {
      throw new Error(`Received invalid publisher name: '${publisherName}' did not conform to X.500 distinguished name syntax for MakeCert.`);
    }

    return yield (0, _sign.makeCert)(makeCertOptions);
  });

  return function createDefaultCertificate(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
})();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolveCommand = require('cross-spawn/lib/util/resolveCommand');

var _resolveCommand2 = _interopRequireDefault(_resolveCommand);

var _electronWindowsStore = require('electron-windows-store');

var _electronWindowsStore2 = _interopRequireDefault(_electronWindowsStore);

var _sign = require('electron-windows-store/lib/sign');

var _configFn = require('../../util/config-fn');

var _configFn2 = _interopRequireDefault(_configFn);

var _authorName = require('../../util/author-name');

var _authorName2 = _interopRequireDefault(_authorName);

var _ensureOutput = require('../../util/ensure-output');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// electron-windows-store doesn't set its 'os' field even though it only runs on
// win32
const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return process.platform === 'win32';
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

// NB: This is not a typo, we require AppXs to be built on 64-bit
// but if we're running in a 32-bit node.js process, we're going to
// be Wow64 redirected
const windowsSdkPath = process.arch === 'x64' ? 'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64' : 'C:\\Program Files\\Windows Kits\\10\\bin\\x64';

function findSdkTool(exe) {
  let sdkTool = _path2.default.join(windowsSdkPath, exe);
  if (!_fs2.default.existsSync(sdkTool)) {
    sdkTool = (0, _resolveCommand2.default)(exe, true);
  }

  if (!_fs2.default.existsSync(sdkTool)) {
    throw new Error(`Can't find ${exe} in PATH. You probably need to install the Windows SDK.`);
  }

  return sdkTool;
}

function getDistinguishedNameFromAuthor(author) {
  return `CN=${(0, _authorName2.default)(author)}`;
}

exports.default = (() => {
  var _ref3 = (0, _bluebird.coroutine)(function* ({ dir, appName, targetArch, forgeConfig, packageJSON }) {
    const outPath = _path2.default.resolve(dir, `../make/appx/${targetArch}`);
    yield (0, _ensureOutput.ensureDirectory)(outPath);

    const userConfig = (0, _configFn2.default)(forgeConfig.windowsStoreConfig, targetArch);

    const opts = (0, _assign2.default)({
      publisher: getDistinguishedNameFromAuthor(packageJSON.author),
      flatten: false,
      deploy: false,
      packageVersion: `${packageJSON.version}.0`,
      packageName: appName.replace(/-/g, ''),
      packageDisplayName: appName,
      packageDescription: packageJSON.description || appName,
      packageExecutable: `app\\${appName}.exe`,
      windowsKit: userConfig.windowsKit || _path2.default.dirname(findSdkTool('makeappx.exe'))
    }, userConfig, {
      inputDirectory: dir,
      outputDirectory: outPath
    });

    if (!opts.publisher) {
      throw 'Please set config.forge.windowsStoreConfig.publisher or author.name in package.json for the appx target';
    }

    if (!opts.devCert) {
      opts.devCert = yield createDefaultCertificate(opts.publisher, { certFilePath: outPath, program: opts });
    }

    if (opts.packageVersion.match(/-/)) {
      if (opts.makeVersionWinStoreCompatible) {
        const noBeta = opts.packageVersion.replace(/-.*/, '');
        opts.packageVersion = `${noBeta}.0`;
      } else {
        const err = "Windows Store version numbers don't support semver beta tags. To" + 'automatically fix this, set makeVersionWinStoreCompatible to true or ' + 'explicitly set packageVersion to a version of the format X.Y.Z.A';

        throw new Error(err);
      }
    }

    delete opts.makeVersionWinStoreCompatible;

    yield (0, _electronWindowsStore2.default)(opts);

    return [_path2.default.resolve(outPath, `${opts.packageName}.appx`)];
  });

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,