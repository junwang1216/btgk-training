'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ensureOutput = require('../../util/ensure-output');

var _configFn = require('../../util/config-fn');

var _configFn2 = _interopRequireDefault(_configFn);

var _isInstalled = require('../../util/is-installed');

var _isInstalled2 = _interopRequireDefault(_isInstalled);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return (0, _isInstalled2.default)('electron-winstaller');
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

exports.default = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* ({ dir, appName, targetArch, forgeConfig, packageJSON }) {
    var _require = require('electron-winstaller');

    const createWindowsInstaller = _require.createWindowsInstaller;


    const outPath = _path2.default.resolve(dir, `../make/squirrel.windows/${targetArch}`);
    yield (0, _ensureOutput.ensureDirectory)(outPath);

    const winstallerConfig = (0, _assign2.default)({
      name: appName,
      noMsi: true,
      exe: `${appName}.exe`,
      setupExe: `${appName}-${packageJSON.version} Setup.exe`
    }, (0, _configFn2.default)(forgeConfig.electronWinstallerConfig, targetArch), {
      appDirectory: dir,
      outputDirectory: outPath
    });

    yield createWindowsInstaller(winstallerConfig);

    const artifacts = [_path2.default.resolve(outPath, 'RELEASES'), _path2.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`), _path2.default.resolve(outPath, `${winstallerConfig.name}-${packageJSON.version}-full.nupkg`)];
    const deltaPath = _path2.default.resolve(outPath, `${winstallerConfig.name}-${packageJSON.version}-delta.nupkg`);
    if (winstallerConfig.remoteReleases || (yield _fsExtra2.default.pathExists(deltaPath))) {
      artifacts.push(deltaPath);
    }
    const msiPath = _path2.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);
    if (!winstallerConfig.noMsi && (yield _fsExtra2.default.pathExists(msiPath))) {
      artifacts.push(msiPath);
    }
    return artifacts;
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy93aW4zMi9zcXVpcnJlbC5qcyJdLCJuYW1lcyI6WyJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiZGlyIiwiYXBwTmFtZSIsInRhcmdldEFyY2giLCJmb3JnZUNvbmZpZyIsInBhY2thZ2VKU09OIiwicmVxdWlyZSIsImNyZWF0ZVdpbmRvd3NJbnN0YWxsZXIiLCJvdXRQYXRoIiwicmVzb2x2ZSIsIndpbnN0YWxsZXJDb25maWciLCJuYW1lIiwibm9Nc2kiLCJleGUiLCJzZXR1cEV4ZSIsInZlcnNpb24iLCJlbGVjdHJvbldpbnN0YWxsZXJDb25maWciLCJhcHBEaXJlY3RvcnkiLCJvdXRwdXREaXJlY3RvcnkiLCJhcnRpZmFjdHMiLCJkZWx0YVBhdGgiLCJyZW1vdGVSZWxlYXNlcyIsInBhdGhFeGlzdHMiLCJwdXNoIiwibXNpUGF0aCIsInNldHVwTXNpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVPLE1BQU1BO0FBQUEsc0NBQStCO0FBQUEsV0FBWSwyQkFBWSxxQkFBWixDQUFaO0FBQUEsR0FBL0I7O0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7O3VDQUVRLFdBQU8sRUFBRUMsR0FBRixFQUFPQyxPQUFQLEVBQWdCQyxVQUFoQixFQUE0QkMsV0FBNUIsRUFBeUNDLFdBQXpDLEVBQVAsRUFBa0U7QUFBQSxtQkFDNUNDLFFBQVEscUJBQVIsQ0FENEM7O0FBQUEsVUFDdkVDLHNCQUR1RSxZQUN2RUEsc0JBRHVFOzs7QUFHL0UsVUFBTUMsVUFBVSxlQUFLQyxPQUFMLENBQWFSLEdBQWIsRUFBbUIsNEJBQTJCRSxVQUFXLEVBQXpELENBQWhCO0FBQ0EsVUFBTSxtQ0FBZ0JLLE9BQWhCLENBQU47O0FBRUEsVUFBTUUsbUJBQW1CLHNCQUFjO0FBQ3JDQyxZQUFNVCxPQUQrQjtBQUVyQ1UsYUFBTyxJQUY4QjtBQUdyQ0MsV0FBTSxHQUFFWCxPQUFRLE1BSHFCO0FBSXJDWSxnQkFBVyxHQUFFWixPQUFRLElBQUdHLFlBQVlVLE9BQVE7QUFKUCxLQUFkLEVBS3RCLHdCQUFTWCxZQUFZWSx3QkFBckIsRUFBK0NiLFVBQS9DLENBTHNCLEVBS3NDO0FBQzdEYyxvQkFBY2hCLEdBRCtDO0FBRTdEaUIsdUJBQWlCVjtBQUY0QyxLQUx0QyxDQUF6Qjs7QUFVQSxVQUFNRCx1QkFBdUJHLGdCQUF2QixDQUFOOztBQUVBLFVBQU1TLFlBQVksQ0FDaEIsZUFBS1YsT0FBTCxDQUFhRCxPQUFiLEVBQXNCLFVBQXRCLENBRGdCLEVBRWhCLGVBQUtDLE9BQUwsQ0FBYUQsT0FBYixFQUFzQkUsaUJBQWlCSSxRQUFqQixJQUE4QixHQUFFWixPQUFRLFdBQTlELENBRmdCLEVBR2hCLGVBQUtPLE9BQUwsQ0FBYUQsT0FBYixFQUF1QixHQUFFRSxpQkFBaUJDLElBQUssSUFBR04sWUFBWVUsT0FBUSxhQUF0RSxDQUhnQixDQUFsQjtBQUtBLFVBQU1LLFlBQVksZUFBS1gsT0FBTCxDQUFhRCxPQUFiLEVBQXVCLEdBQUVFLGlCQUFpQkMsSUFBSyxJQUFHTixZQUFZVSxPQUFRLGNBQXRFLENBQWxCO0FBQ0EsUUFBSUwsaUJBQWlCVyxjQUFqQixLQUFtQyxNQUFNLGtCQUFHQyxVQUFILENBQWNGLFNBQWQsQ0FBekMsQ0FBSixFQUF1RTtBQUNyRUQsZ0JBQVVJLElBQVYsQ0FBZUgsU0FBZjtBQUNEO0FBQ0QsVUFBTUksVUFBVSxlQUFLZixPQUFMLENBQWFELE9BQWIsRUFBc0JFLGlCQUFpQmUsUUFBakIsSUFBOEIsR0FBRXZCLE9BQVEsV0FBOUQsQ0FBaEI7QUFDQSxRQUFJLENBQUNRLGlCQUFpQkUsS0FBbEIsS0FBMkIsTUFBTSxrQkFBR1UsVUFBSCxDQUFjRSxPQUFkLENBQWpDLENBQUosRUFBNkQ7QUFDM0RMLGdCQUFVSSxJQUFWLENBQWVDLE9BQWY7QUFDRDtBQUNELFdBQU9MLFNBQVA7QUFDRCxHIiwiZmlsZSI6Im1ha2Vycy93aW4zMi9zcXVpcnJlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgZW5zdXJlRGlyZWN0b3J5IH0gZnJvbSAnLi4vLi4vdXRpbC9lbnN1cmUtb3V0cHV0JztcbmltcG9ydCBjb25maWdGbiBmcm9tICcuLi8uLi91dGlsL2NvbmZpZy1mbic7XG5pbXBvcnQgaXNJbnN0YWxsZWQgZnJvbSAnLi4vLi4vdXRpbC9pcy1pbnN0YWxsZWQnO1xuXG5leHBvcnQgY29uc3QgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSA9IGFzeW5jICgpID0+IGlzSW5zdGFsbGVkKCdlbGVjdHJvbi13aW5zdGFsbGVyJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh7IGRpciwgYXBwTmFtZSwgdGFyZ2V0QXJjaCwgZm9yZ2VDb25maWcsIHBhY2thZ2VKU09OIH0pID0+IHtcbiAgY29uc3QgeyBjcmVhdGVXaW5kb3dzSW5zdGFsbGVyIH0gPSByZXF1aXJlKCdlbGVjdHJvbi13aW5zdGFsbGVyJyk7XG5cbiAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShkaXIsIGAuLi9tYWtlL3NxdWlycmVsLndpbmRvd3MvJHt0YXJnZXRBcmNofWApO1xuICBhd2FpdCBlbnN1cmVEaXJlY3Rvcnkob3V0UGF0aCk7XG5cbiAgY29uc3Qgd2luc3RhbGxlckNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIG5hbWU6IGFwcE5hbWUsXG4gICAgbm9Nc2k6IHRydWUsXG4gICAgZXhlOiBgJHthcHBOYW1lfS5leGVgLFxuICAgIHNldHVwRXhlOiBgJHthcHBOYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259IFNldHVwLmV4ZWAsXG4gIH0sIGNvbmZpZ0ZuKGZvcmdlQ29uZmlnLmVsZWN0cm9uV2luc3RhbGxlckNvbmZpZywgdGFyZ2V0QXJjaCksIHtcbiAgICBhcHBEaXJlY3Rvcnk6IGRpcixcbiAgICBvdXRwdXREaXJlY3Rvcnk6IG91dFBhdGgsXG4gIH0pO1xuXG4gIGF3YWl0IGNyZWF0ZVdpbmRvd3NJbnN0YWxsZXIod2luc3RhbGxlckNvbmZpZyk7XG5cbiAgY29uc3QgYXJ0aWZhY3RzID0gW1xuICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCAnUkVMRUFTRVMnKSxcbiAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cEV4ZSB8fCBgJHthcHBOYW1lfVNldHVwLmV4ZWApLFxuICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCBgJHt3aW5zdGFsbGVyQ29uZmlnLm5hbWV9LSR7cGFja2FnZUpTT04udmVyc2lvbn0tZnVsbC5udXBrZ2ApLFxuICBdO1xuICBjb25zdCBkZWx0YVBhdGggPSBwYXRoLnJlc29sdmUob3V0UGF0aCwgYCR7d2luc3RhbGxlckNvbmZpZy5uYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259LWRlbHRhLm51cGtnYCk7XG4gIGlmICh3aW5zdGFsbGVyQ29uZmlnLnJlbW90ZVJlbGVhc2VzIHx8IGF3YWl0IGZzLnBhdGhFeGlzdHMoZGVsdGFQYXRoKSkge1xuICAgIGFydGlmYWN0cy5wdXNoKGRlbHRhUGF0aCk7XG4gIH1cbiAgY29uc3QgbXNpUGF0aCA9IHBhdGgucmVzb2x2ZShvdXRQYXRoLCB3aW5zdGFsbGVyQ29uZmlnLnNldHVwTXNpIHx8IGAke2FwcE5hbWV9U2V0dXAubXNpYCk7XG4gIGlmICghd2luc3RhbGxlckNvbmZpZy5ub01zaSAmJiBhd2FpdCBmcy5wYXRoRXhpc3RzKG1zaVBhdGgpKSB7XG4gICAgYXJ0aWZhY3RzLnB1c2gobXNpUGF0aCk7XG4gIH1cbiAgcmV0dXJuIGFydGlmYWN0cztcbn07XG4iXX0=