'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _bluebird = require('bluebird');

var _child_process = require('child_process');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _ensureOutput = require('../../util/ensure-output');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return true;
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

const zipPromise = (from, to) => new _promise2.default((resolve, reject) => {
  const child = (0, _child_process.spawn)('zip', ['-r', '-y', to, _path2.default.basename(from)], {
    cwd: _path2.default.dirname(from)
  });

  child.stdout.on('data', () => {});
  child.stderr.on('data', () => {});

  child.on('close', code => {
    if (code === 0) return resolve();
    reject(new Error(`Failed to zip, exitted with code: ${code}`));
  });
});

exports.default = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* ({ dir, appName, targetPlatform, packageJSON }) {
    const zipFolder = require('zip-folder');

    const zipPath = _path2.default.resolve(dir, '../make', `${_path2.default.basename(dir)}-${packageJSON.version}.zip`);
    yield (0, _ensureOutput.ensureFile)(zipPath);
    switch (targetPlatform) {
      // This case is tested but not on the coverage reporting platform
      /* istanbul ignore next */
      case 'win32':
        yield (0, _pify2.default)(zipFolder)(dir, zipPath);
        break;
      case 'mas':
      case 'darwin':
        yield zipPromise(_path2.default.resolve(dir, `${appName}.app`), zipPath);
        break;
      // This case is tested but not on the coverage reporting platform
      /* istanbul ignore next */
      case 'linux':
        yield zipPromise(dir, zipPath);
        break;
      default:
        throw new Error('Unrecognized platform');
    }
    return [zipPath];
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy9nZW5lcmljL3ppcC5qcyJdLCJuYW1lcyI6WyJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiemlwUHJvbWlzZSIsImZyb20iLCJ0byIsInJlc29sdmUiLCJyZWplY3QiLCJjaGlsZCIsImJhc2VuYW1lIiwiY3dkIiwiZGlybmFtZSIsInN0ZG91dCIsIm9uIiwic3RkZXJyIiwiY29kZSIsIkVycm9yIiwiZGlyIiwiYXBwTmFtZSIsInRhcmdldFBsYXRmb3JtIiwicGFja2FnZUpTT04iLCJ6aXBGb2xkZXIiLCJyZXF1aXJlIiwiemlwUGF0aCIsInZlcnNpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFTyxNQUFNQTtBQUFBLHNDQUErQjtBQUFBLFdBQVksSUFBWjtBQUFBLEdBQS9COztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBRVAsTUFBTUMsYUFBYSxDQUFDQyxJQUFELEVBQU9DLEVBQVAsS0FDakIsc0JBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQy9CLFFBQU1DLFFBQVEsMEJBQU0sS0FBTixFQUFhLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYUgsRUFBYixFQUFpQixlQUFLSSxRQUFMLENBQWNMLElBQWQsQ0FBakIsQ0FBYixFQUFvRDtBQUNoRU0sU0FBSyxlQUFLQyxPQUFMLENBQWFQLElBQWI7QUFEMkQsR0FBcEQsQ0FBZDs7QUFJQUksUUFBTUksTUFBTixDQUFhQyxFQUFiLENBQWdCLE1BQWhCLEVBQXdCLE1BQU0sQ0FBRSxDQUFoQztBQUNBTCxRQUFNTSxNQUFOLENBQWFELEVBQWIsQ0FBZ0IsTUFBaEIsRUFBd0IsTUFBTSxDQUFFLENBQWhDOztBQUVBTCxRQUFNSyxFQUFOLENBQVMsT0FBVCxFQUFtQkUsSUFBRCxJQUFVO0FBQzFCLFFBQUlBLFNBQVMsQ0FBYixFQUFnQixPQUFPVCxTQUFQO0FBQ2hCQyxXQUFPLElBQUlTLEtBQUosQ0FBVyxxQ0FBb0NELElBQUssRUFBcEQsQ0FBUDtBQUNELEdBSEQ7QUFJRCxDQVpELENBREY7Ozt1Q0FlZSxXQUFPLEVBQUVFLEdBQUYsRUFBT0MsT0FBUCxFQUFnQkMsY0FBaEIsRUFBZ0NDLFdBQWhDLEVBQVAsRUFBeUQ7QUFDdEUsVUFBTUMsWUFBWUMsUUFBUSxZQUFSLENBQWxCOztBQUVBLFVBQU1DLFVBQVUsZUFBS2pCLE9BQUwsQ0FBYVcsR0FBYixFQUFrQixTQUFsQixFQUE4QixHQUFFLGVBQUtSLFFBQUwsQ0FBY1EsR0FBZCxDQUFtQixJQUFHRyxZQUFZSSxPQUFRLE1BQTFFLENBQWhCO0FBQ0EsVUFBTSw4QkFBV0QsT0FBWCxDQUFOO0FBQ0EsWUFBUUosY0FBUjtBQUNFO0FBQ0E7QUFDQSxXQUFLLE9BQUw7QUFDRSxjQUFNLG9CQUFLRSxTQUFMLEVBQWdCSixHQUFoQixFQUFxQk0sT0FBckIsQ0FBTjtBQUNBO0FBQ0YsV0FBSyxLQUFMO0FBQ0EsV0FBSyxRQUFMO0FBQ0UsY0FBTXBCLFdBQVcsZUFBS0csT0FBTCxDQUFhVyxHQUFiLEVBQW1CLEdBQUVDLE9BQVEsTUFBN0IsQ0FBWCxFQUFnREssT0FBaEQsQ0FBTjtBQUNBO0FBQ0Y7QUFDQTtBQUNBLFdBQUssT0FBTDtBQUNFLGNBQU1wQixXQUFXYyxHQUFYLEVBQWdCTSxPQUFoQixDQUFOO0FBQ0E7QUFDRjtBQUNFLGNBQU0sSUFBSVAsS0FBSixDQUFVLHVCQUFWLENBQU47QUFoQko7QUFrQkEsV0FBTyxDQUFDTyxPQUFELENBQVA7QUFDRCxHIiwiZmlsZSI6Im1ha2Vycy9nZW5lcmljL3ppcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwYXduIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBwaWZ5IGZyb20gJ3BpZnknO1xuXG5pbXBvcnQgeyBlbnN1cmVGaWxlIH0gZnJvbSAnLi4vLi4vdXRpbC9lbnN1cmUtb3V0cHV0JztcblxuZXhwb3J0IGNvbnN0IGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0gPSBhc3luYyAoKSA9PiB0cnVlO1xuXG5jb25zdCB6aXBQcm9taXNlID0gKGZyb20sIHRvKSA9PlxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgY2hpbGQgPSBzcGF3bignemlwJywgWyctcicsICcteScsIHRvLCBwYXRoLmJhc2VuYW1lKGZyb20pXSwge1xuICAgICAgY3dkOiBwYXRoLmRpcm5hbWUoZnJvbSksXG4gICAgfSk7XG5cbiAgICBjaGlsZC5zdGRvdXQub24oJ2RhdGEnLCAoKSA9PiB7fSk7XG4gICAgY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgKCkgPT4ge30pO1xuXG4gICAgY2hpbGQub24oJ2Nsb3NlJywgKGNvZGUpID0+IHtcbiAgICAgIGlmIChjb2RlID09PSAwKSByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIHppcCwgZXhpdHRlZCB3aXRoIGNvZGU6ICR7Y29kZX1gKSk7XG4gICAgfSk7XG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoeyBkaXIsIGFwcE5hbWUsIHRhcmdldFBsYXRmb3JtLCBwYWNrYWdlSlNPTiB9KSA9PiB7XG4gIGNvbnN0IHppcEZvbGRlciA9IHJlcXVpcmUoJ3ppcC1mb2xkZXInKTtcblxuICBjb25zdCB6aXBQYXRoID0gcGF0aC5yZXNvbHZlKGRpciwgJy4uL21ha2UnLCBgJHtwYXRoLmJhc2VuYW1lKGRpcil9LSR7cGFja2FnZUpTT04udmVyc2lvbn0uemlwYCk7XG4gIGF3YWl0IGVuc3VyZUZpbGUoemlwUGF0aCk7XG4gIHN3aXRjaCAodGFyZ2V0UGxhdGZvcm0pIHtcbiAgICAvLyBUaGlzIGNhc2UgaXMgdGVzdGVkIGJ1dCBub3Qgb24gdGhlIGNvdmVyYWdlIHJlcG9ydGluZyBwbGF0Zm9ybVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgY2FzZSAnd2luMzInOlxuICAgICAgYXdhaXQgcGlmeSh6aXBGb2xkZXIpKGRpciwgemlwUGF0aCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtYXMnOlxuICAgIGNhc2UgJ2Rhcndpbic6XG4gICAgICBhd2FpdCB6aXBQcm9taXNlKHBhdGgucmVzb2x2ZShkaXIsIGAke2FwcE5hbWV9LmFwcGApLCB6aXBQYXRoKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIFRoaXMgY2FzZSBpcyB0ZXN0ZWQgYnV0IG5vdCBvbiB0aGUgY292ZXJhZ2UgcmVwb3J0aW5nIHBsYXRmb3JtXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBjYXNlICdsaW51eCc6XG4gICAgICBhd2FpdCB6aXBQcm9taXNlKGRpciwgemlwUGF0aCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgcGxhdGZvcm0nKTtcbiAgfVxuICByZXR1cm4gW3ppcFBhdGhdO1xufTtcbiJdfQ==