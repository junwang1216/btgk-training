'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _bluebird = require('bluebird');

exports.rpmArch = rpmArch;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _ensureOutput = require('../../util/ensure-output');

var _isInstalled = require('../../util/is-installed');

var _isInstalled2 = _interopRequireDefault(_isInstalled);

var _linuxConfig = require('../../util/linux-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return (0, _isInstalled2.default)('electron-installer-redhat');
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

function rpmArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';
    case 'x64':
      return 'x86_64';
    case 'armv7l':
      return 'armv7hl';
    case 'arm':
      return 'armv6hl';
    default:
      return nodeArch;
  }
}

exports.default = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* ({ dir, targetArch, forgeConfig, packageJSON }) {
    const installer = require('electron-installer-redhat');

    const arch = rpmArch(targetArch);
    const config = (0, _linuxConfig.populateConfig)({ forgeConfig, configKey: 'electronInstallerRedhat', targetArch });
    const name = config.options.name || packageJSON.name;
    const versionedName = `${name}-${packageJSON.version}.${arch}`;
    const outPath = _path2.default.resolve(dir, '../make', `${versionedName}.rpm`);

    yield (0, _ensureOutput.ensureFile)(outPath);
    const rpmConfig = (0, _linuxConfig.linuxConfig)({
      config,
      pkgArch: arch,
      dir,
      outPath
    });

    yield (0, _pify2.default)(installer)(rpmConfig);
    return [outPath];
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy9saW51eC9ycG0uanMiXSwibmFtZXMiOlsicnBtQXJjaCIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJub2RlQXJjaCIsImRpciIsInRhcmdldEFyY2giLCJmb3JnZUNvbmZpZyIsInBhY2thZ2VKU09OIiwiaW5zdGFsbGVyIiwicmVxdWlyZSIsImFyY2giLCJjb25maWciLCJjb25maWdLZXkiLCJuYW1lIiwib3B0aW9ucyIsInZlcnNpb25lZE5hbWUiLCJ2ZXJzaW9uIiwib3V0UGF0aCIsInJlc29sdmUiLCJycG1Db25maWciLCJwa2dBcmNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7UUFTZ0JBLE8sR0FBQUEsTzs7QUFUaEI7Ozs7QUFDQTs7OztBQUVBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFTyxNQUFNQztBQUFBLHNDQUErQjtBQUFBLFdBQVksMkJBQVksMkJBQVosQ0FBWjtBQUFBLEdBQS9COztBQUFBO0FBQUE7QUFBQTtBQUFBLElBQU47O0FBRUEsU0FBU0QsT0FBVCxDQUFpQkUsUUFBakIsRUFBMkI7QUFDaEMsVUFBUUEsUUFBUjtBQUNFLFNBQUssTUFBTDtBQUFhLGFBQU8sTUFBUDtBQUNiLFNBQUssS0FBTDtBQUFZLGFBQU8sUUFBUDtBQUNaLFNBQUssUUFBTDtBQUFlLGFBQU8sU0FBUDtBQUNmLFNBQUssS0FBTDtBQUFZLGFBQU8sU0FBUDtBQUNaO0FBQVMsYUFBT0EsUUFBUDtBQUxYO0FBT0Q7Ozt1Q0FFYyxXQUFPLEVBQUVDLEdBQUYsRUFBT0MsVUFBUCxFQUFtQkMsV0FBbkIsRUFBZ0NDLFdBQWhDLEVBQVAsRUFBeUQ7QUFDdEUsVUFBTUMsWUFBWUMsUUFBUSwyQkFBUixDQUFsQjs7QUFFQSxVQUFNQyxPQUFPVCxRQUFRSSxVQUFSLENBQWI7QUFDQSxVQUFNTSxTQUFTLGlDQUFlLEVBQUVMLFdBQUYsRUFBZU0sV0FBVyx5QkFBMUIsRUFBcURQLFVBQXJELEVBQWYsQ0FBZjtBQUNBLFVBQU1RLE9BQU9GLE9BQU9HLE9BQVAsQ0FBZUQsSUFBZixJQUF1Qk4sWUFBWU0sSUFBaEQ7QUFDQSxVQUFNRSxnQkFBaUIsR0FBRUYsSUFBSyxJQUFHTixZQUFZUyxPQUFRLElBQUdOLElBQUssRUFBN0Q7QUFDQSxVQUFNTyxVQUFVLGVBQUtDLE9BQUwsQ0FBYWQsR0FBYixFQUFrQixTQUFsQixFQUE4QixHQUFFVyxhQUFjLE1BQTlDLENBQWhCOztBQUVBLFVBQU0sOEJBQVdFLE9BQVgsQ0FBTjtBQUNBLFVBQU1FLFlBQVksOEJBQVk7QUFDNUJSLFlBRDRCO0FBRTVCUyxlQUFTVixJQUZtQjtBQUc1Qk4sU0FINEI7QUFJNUJhO0FBSjRCLEtBQVosQ0FBbEI7O0FBT0EsVUFBTSxvQkFBS1QsU0FBTCxFQUFnQlcsU0FBaEIsQ0FBTjtBQUNBLFdBQU8sQ0FBQ0YsT0FBRCxDQUFQO0FBQ0QsRyIsImZpbGUiOiJtYWtlcnMvbGludXgvcnBtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcGlmeSBmcm9tICdwaWZ5JztcblxuaW1wb3J0IHsgZW5zdXJlRmlsZSB9IGZyb20gJy4uLy4uL3V0aWwvZW5zdXJlLW91dHB1dCc7XG5pbXBvcnQgaXNJbnN0YWxsZWQgZnJvbSAnLi4vLi4vdXRpbC9pcy1pbnN0YWxsZWQnO1xuaW1wb3J0IHsgbGludXhDb25maWcsIHBvcHVsYXRlQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbC9saW51eC1jb25maWcnO1xuXG5leHBvcnQgY29uc3QgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSA9IGFzeW5jICgpID0+IGlzSW5zdGFsbGVkKCdlbGVjdHJvbi1pbnN0YWxsZXItcmVkaGF0Jyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBycG1BcmNoKG5vZGVBcmNoKSB7XG4gIHN3aXRjaCAobm9kZUFyY2gpIHtcbiAgICBjYXNlICdpYTMyJzogcmV0dXJuICdpMzg2JztcbiAgICBjYXNlICd4NjQnOiByZXR1cm4gJ3g4Nl82NCc7XG4gICAgY2FzZSAnYXJtdjdsJzogcmV0dXJuICdhcm12N2hsJztcbiAgICBjYXNlICdhcm0nOiByZXR1cm4gJ2FybXY2aGwnO1xuICAgIGRlZmF1bHQ6IHJldHVybiBub2RlQXJjaDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoeyBkaXIsIHRhcmdldEFyY2gsIGZvcmdlQ29uZmlnLCBwYWNrYWdlSlNPTiB9KSA9PiB7XG4gIGNvbnN0IGluc3RhbGxlciA9IHJlcXVpcmUoJ2VsZWN0cm9uLWluc3RhbGxlci1yZWRoYXQnKTtcblxuICBjb25zdCBhcmNoID0gcnBtQXJjaCh0YXJnZXRBcmNoKTtcbiAgY29uc3QgY29uZmlnID0gcG9wdWxhdGVDb25maWcoeyBmb3JnZUNvbmZpZywgY29uZmlnS2V5OiAnZWxlY3Ryb25JbnN0YWxsZXJSZWRoYXQnLCB0YXJnZXRBcmNoIH0pO1xuICBjb25zdCBuYW1lID0gY29uZmlnLm9wdGlvbnMubmFtZSB8fCBwYWNrYWdlSlNPTi5uYW1lO1xuICBjb25zdCB2ZXJzaW9uZWROYW1lID0gYCR7bmFtZX0tJHtwYWNrYWdlSlNPTi52ZXJzaW9ufS4ke2FyY2h9YDtcbiAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShkaXIsICcuLi9tYWtlJywgYCR7dmVyc2lvbmVkTmFtZX0ucnBtYCk7XG5cbiAgYXdhaXQgZW5zdXJlRmlsZShvdXRQYXRoKTtcbiAgY29uc3QgcnBtQ29uZmlnID0gbGludXhDb25maWcoe1xuICAgIGNvbmZpZyxcbiAgICBwa2dBcmNoOiBhcmNoLFxuICAgIGRpcixcbiAgICBvdXRQYXRoLFxuICB9KTtcblxuICBhd2FpdCBwaWZ5KGluc3RhbGxlcikocnBtQ29uZmlnKTtcbiAgcmV0dXJuIFtvdXRQYXRoXTtcbn07XG4iXX0=