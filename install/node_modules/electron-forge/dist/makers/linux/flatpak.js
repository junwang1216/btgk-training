'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _bluebird = require('bluebird');

exports.flatpakArch = flatpakArch;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _ensureOutput = require('../../util/ensure-output');

var _isInstalled = require('../../util/is-installed');

var _isInstalled2 = _interopRequireDefault(_isInstalled);

var _linuxConfig = require('../../util/linux-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return (0, _isInstalled2.default)('electron-installer-flatpak');
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

function flatpakArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';
    case 'x64':
      return 'x86_64';
    case 'armv7l':
      return 'arm';
    // arm => arm
    default:
      return nodeArch;
  }
}

exports.default = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* ({ dir, targetArch, forgeConfig }) {
    const installer = require('electron-installer-flatpak');

    const arch = flatpakArch(targetArch);
    const config = (0, _linuxConfig.populateConfig)({ forgeConfig, configKey: 'electronInstallerFlatpak', targetArch });
    const outDir = _path2.default.resolve(dir, '../make');

    yield (0, _ensureOutput.ensureDirectory)(outDir);
    const flatpakConfig = (0, _linuxConfig.linuxConfig)({
      config,
      pkgArch: arch,
      dir,
      // electron-installer-flatpak uses a filename scheme with default config options that we don't
      // have access to, so we need to detect the flatpak filename after it's created.
      outPath: _path2.default.join(outDir, 'dummy.flatpak')
    });

    yield (0, _pify2.default)(installer)(flatpakConfig);

    return (yield _fsExtra2.default.readdir(outDir)).filter(function (basename) {
      return basename.endsWith('.flatpak');
    }).map(function (basename) {
      return _path2.default.join(outDir, basename);
    });
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy9saW51eC9mbGF0cGFrLmpzIl0sIm5hbWVzIjpbImZsYXRwYWtBcmNoIiwiaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSIsIm5vZGVBcmNoIiwiZGlyIiwidGFyZ2V0QXJjaCIsImZvcmdlQ29uZmlnIiwiaW5zdGFsbGVyIiwicmVxdWlyZSIsImFyY2giLCJjb25maWciLCJjb25maWdLZXkiLCJvdXREaXIiLCJyZXNvbHZlIiwiZmxhdHBha0NvbmZpZyIsInBrZ0FyY2giLCJvdXRQYXRoIiwiam9pbiIsInJlYWRkaXIiLCJmaWx0ZXIiLCJiYXNlbmFtZSIsImVuZHNXaXRoIiwibWFwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7UUFVZ0JBLFcsR0FBQUEsVzs7QUFWaEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUVPLE1BQU1DO0FBQUEsc0NBQStCO0FBQUEsV0FBWSwyQkFBWSw0QkFBWixDQUFaO0FBQUEsR0FBL0I7O0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFFQSxTQUFTRCxXQUFULENBQXFCRSxRQUFyQixFQUErQjtBQUNwQyxVQUFRQSxRQUFSO0FBQ0UsU0FBSyxNQUFMO0FBQWEsYUFBTyxNQUFQO0FBQ2IsU0FBSyxLQUFMO0FBQVksYUFBTyxRQUFQO0FBQ1osU0FBSyxRQUFMO0FBQWUsYUFBTyxLQUFQO0FBQ2Y7QUFDQTtBQUFTLGFBQU9BLFFBQVA7QUFMWDtBQU9EOzs7dUNBRWMsV0FBTyxFQUFFQyxHQUFGLEVBQU9DLFVBQVAsRUFBbUJDLFdBQW5CLEVBQVAsRUFBNEM7QUFDekQsVUFBTUMsWUFBWUMsUUFBUSw0QkFBUixDQUFsQjs7QUFFQSxVQUFNQyxPQUFPUixZQUFZSSxVQUFaLENBQWI7QUFDQSxVQUFNSyxTQUFTLGlDQUFlLEVBQUVKLFdBQUYsRUFBZUssV0FBVywwQkFBMUIsRUFBc0ROLFVBQXRELEVBQWYsQ0FBZjtBQUNBLFVBQU1PLFNBQVMsZUFBS0MsT0FBTCxDQUFhVCxHQUFiLEVBQWtCLFNBQWxCLENBQWY7O0FBRUEsVUFBTSxtQ0FBZ0JRLE1BQWhCLENBQU47QUFDQSxVQUFNRSxnQkFBZ0IsOEJBQVk7QUFDaENKLFlBRGdDO0FBRWhDSyxlQUFTTixJQUZ1QjtBQUdoQ0wsU0FIZ0M7QUFJaEM7QUFDQTtBQUNBWSxlQUFTLGVBQUtDLElBQUwsQ0FBVUwsTUFBVixFQUFrQixlQUFsQjtBQU51QixLQUFaLENBQXRCOztBQVNBLFVBQU0sb0JBQUtMLFNBQUwsRUFBZ0JPLGFBQWhCLENBQU47O0FBRUEsV0FBTyxDQUFDLE1BQU0sa0JBQUdJLE9BQUgsQ0FBV04sTUFBWCxDQUFQLEVBQ0pPLE1BREksQ0FDRztBQUFBLGFBQVlDLFNBQVNDLFFBQVQsQ0FBa0IsVUFBbEIsQ0FBWjtBQUFBLEtBREgsRUFFSkMsR0FGSSxDQUVBO0FBQUEsYUFBWSxlQUFLTCxJQUFMLENBQVVMLE1BQVYsRUFBa0JRLFFBQWxCLENBQVo7QUFBQSxLQUZBLENBQVA7QUFHRCxHIiwiZmlsZSI6Im1ha2Vycy9saW51eC9mbGF0cGFrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHBpZnkgZnJvbSAncGlmeSc7XG5cbmltcG9ydCB7IGVuc3VyZURpcmVjdG9yeSB9IGZyb20gJy4uLy4uL3V0aWwvZW5zdXJlLW91dHB1dCc7XG5pbXBvcnQgaXNJbnN0YWxsZWQgZnJvbSAnLi4vLi4vdXRpbC9pcy1pbnN0YWxsZWQnO1xuaW1wb3J0IHsgbGludXhDb25maWcsIHBvcHVsYXRlQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbC9saW51eC1jb25maWcnO1xuXG5leHBvcnQgY29uc3QgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSA9IGFzeW5jICgpID0+IGlzSW5zdGFsbGVkKCdlbGVjdHJvbi1pbnN0YWxsZXItZmxhdHBhaycpO1xuXG5leHBvcnQgZnVuY3Rpb24gZmxhdHBha0FyY2gobm9kZUFyY2gpIHtcbiAgc3dpdGNoIChub2RlQXJjaCkge1xuICAgIGNhc2UgJ2lhMzInOiByZXR1cm4gJ2kzODYnO1xuICAgIGNhc2UgJ3g2NCc6IHJldHVybiAneDg2XzY0JztcbiAgICBjYXNlICdhcm12N2wnOiByZXR1cm4gJ2FybSc7XG4gICAgLy8gYXJtID0+IGFybVxuICAgIGRlZmF1bHQ6IHJldHVybiBub2RlQXJjaDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoeyBkaXIsIHRhcmdldEFyY2gsIGZvcmdlQ29uZmlnIH0pID0+IHtcbiAgY29uc3QgaW5zdGFsbGVyID0gcmVxdWlyZSgnZWxlY3Ryb24taW5zdGFsbGVyLWZsYXRwYWsnKTtcblxuICBjb25zdCBhcmNoID0gZmxhdHBha0FyY2godGFyZ2V0QXJjaCk7XG4gIGNvbnN0IGNvbmZpZyA9IHBvcHVsYXRlQ29uZmlnKHsgZm9yZ2VDb25maWcsIGNvbmZpZ0tleTogJ2VsZWN0cm9uSW5zdGFsbGVyRmxhdHBhaycsIHRhcmdldEFyY2ggfSk7XG4gIGNvbnN0IG91dERpciA9IHBhdGgucmVzb2x2ZShkaXIsICcuLi9tYWtlJyk7XG5cbiAgYXdhaXQgZW5zdXJlRGlyZWN0b3J5KG91dERpcik7XG4gIGNvbnN0IGZsYXRwYWtDb25maWcgPSBsaW51eENvbmZpZyh7XG4gICAgY29uZmlnLFxuICAgIHBrZ0FyY2g6IGFyY2gsXG4gICAgZGlyLFxuICAgIC8vIGVsZWN0cm9uLWluc3RhbGxlci1mbGF0cGFrIHVzZXMgYSBmaWxlbmFtZSBzY2hlbWUgd2l0aCBkZWZhdWx0IGNvbmZpZyBvcHRpb25zIHRoYXQgd2UgZG9uJ3RcbiAgICAvLyBoYXZlIGFjY2VzcyB0bywgc28gd2UgbmVlZCB0byBkZXRlY3QgdGhlIGZsYXRwYWsgZmlsZW5hbWUgYWZ0ZXIgaXQncyBjcmVhdGVkLlxuICAgIG91dFBhdGg6IHBhdGguam9pbihvdXREaXIsICdkdW1teS5mbGF0cGFrJyksXG4gIH0pO1xuXG4gIGF3YWl0IHBpZnkoaW5zdGFsbGVyKShmbGF0cGFrQ29uZmlnKTtcblxuICByZXR1cm4gKGF3YWl0IGZzLnJlYWRkaXIob3V0RGlyKSlcbiAgICAuZmlsdGVyKGJhc2VuYW1lID0+IGJhc2VuYW1lLmVuZHNXaXRoKCcuZmxhdHBhaycpKVxuICAgIC5tYXAoYmFzZW5hbWUgPT4gcGF0aC5qb2luKG91dERpciwgYmFzZW5hbWUpKTtcbn07XG4iXX0=