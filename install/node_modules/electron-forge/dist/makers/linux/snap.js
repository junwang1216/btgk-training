'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ensureOutput = require('../../util/ensure-output');

var _configFn = require('../../util/config-fn');

var _configFn2 = _interopRequireDefault(_configFn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return process.platform === 'linux';
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

exports.default = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* ({ dir, targetArch, forgeConfig }) {
    const installer = require('electron-installer-snap');

    const outPath = _path2.default.resolve(dir, '../make');

    yield (0, _ensureOutput.ensureDirectory)(outPath);
    const snapDefaults = {
      arch: targetArch,
      dest: outPath,
      src: dir
    };
    const snapConfig = (0, _assign2.default)({}, (0, _configFn2.default)(forgeConfig.electronInstallerSnap, targetArch), snapDefaults);

    return [yield installer(snapConfig)];
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy9saW51eC9zbmFwLmpzIl0sIm5hbWVzIjpbImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJkaXIiLCJ0YXJnZXRBcmNoIiwiZm9yZ2VDb25maWciLCJpbnN0YWxsZXIiLCJyZXF1aXJlIiwib3V0UGF0aCIsInJlc29sdmUiLCJzbmFwRGVmYXVsdHMiLCJhcmNoIiwiZGVzdCIsInNyYyIsInNuYXBDb25maWciLCJlbGVjdHJvbkluc3RhbGxlclNuYXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUVBOztBQUNBOzs7Ozs7QUFFTyxNQUFNQTtBQUFBLHNDQUErQjtBQUFBLFdBQVlDLFFBQVFDLFFBQVIsS0FBcUIsT0FBakM7QUFBQSxHQUEvQjs7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFOOzs7dUNBRVEsV0FBTyxFQUFFQyxHQUFGLEVBQU9DLFVBQVAsRUFBbUJDLFdBQW5CLEVBQVAsRUFBNEM7QUFDekQsVUFBTUMsWUFBWUMsUUFBUSx5QkFBUixDQUFsQjs7QUFFQSxVQUFNQyxVQUFVLGVBQUtDLE9BQUwsQ0FBYU4sR0FBYixFQUFrQixTQUFsQixDQUFoQjs7QUFFQSxVQUFNLG1DQUFnQkssT0FBaEIsQ0FBTjtBQUNBLFVBQU1FLGVBQWU7QUFDbkJDLFlBQU1QLFVBRGE7QUFFbkJRLFlBQU1KLE9BRmE7QUFHbkJLLFdBQUtWO0FBSGMsS0FBckI7QUFLQSxVQUFNVyxhQUFhLHNCQUFjLEVBQWQsRUFBa0Isd0JBQVNULFlBQVlVLHFCQUFyQixFQUE0Q1gsVUFBNUMsQ0FBbEIsRUFBMkVNLFlBQTNFLENBQW5COztBQUVBLFdBQU8sQ0FBQyxNQUFNSixVQUFVUSxVQUFWLENBQVAsQ0FBUDtBQUNELEciLCJmaWxlIjoibWFrZXJzL2xpbnV4L3NuYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgZW5zdXJlRGlyZWN0b3J5IH0gZnJvbSAnLi4vLi4vdXRpbC9lbnN1cmUtb3V0cHV0JztcbmltcG9ydCBjb25maWdGbiBmcm9tICcuLi8uLi91dGlsL2NvbmZpZy1mbic7XG5cbmV4cG9ydCBjb25zdCBpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtID0gYXN5bmMgKCkgPT4gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4JztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHsgZGlyLCB0YXJnZXRBcmNoLCBmb3JnZUNvbmZpZyB9KSA9PiB7XG4gIGNvbnN0IGluc3RhbGxlciA9IHJlcXVpcmUoJ2VsZWN0cm9uLWluc3RhbGxlci1zbmFwJyk7XG5cbiAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShkaXIsICcuLi9tYWtlJyk7XG5cbiAgYXdhaXQgZW5zdXJlRGlyZWN0b3J5KG91dFBhdGgpO1xuICBjb25zdCBzbmFwRGVmYXVsdHMgPSB7XG4gICAgYXJjaDogdGFyZ2V0QXJjaCxcbiAgICBkZXN0OiBvdXRQYXRoLFxuICAgIHNyYzogZGlyLFxuICB9O1xuICBjb25zdCBzbmFwQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnRm4oZm9yZ2VDb25maWcuZWxlY3Ryb25JbnN0YWxsZXJTbmFwLCB0YXJnZXRBcmNoKSwgc25hcERlZmF1bHRzKTtcblxuICByZXR1cm4gW2F3YWl0IGluc3RhbGxlcihzbmFwQ29uZmlnKV07XG59O1xuIl19