'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:publish:ers');

const ersPlatform = (platform, arch) => {
  switch (platform) {
    case 'darwin':
      return 'osx_64';
    case 'linux':
      return arch === 'ia32' ? 'linux_32' : 'linux_64';
    case 'win32':
      return arch === 'ia32' ? 'windows_32' : 'windows_64';
    default:
      return platform;
  }
};

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* ({ artifacts, packageJSON, forgeConfig, platform, arch }) {
    const ersConfig = forgeConfig.electronReleaseServer;
    if (!(ersConfig.baseUrl && ersConfig.username && ersConfig.password)) {
      throw 'In order to publish to ERS you must set the "electronReleaseServer.baseUrl", "electronReleaseServer.username" and "electronReleaseServer.password" properties in your forge config. See the docs for more info'; // eslint-disable-line
    }

    d('attempting to authenticate to ERS');

    const api = function api(apiPath) {
      return `${ersConfig.baseUrl}/${apiPath}`;
    };

    var _ref2 = yield (yield (0, _nodeFetch2.default)(api('api/auth/login'), {
      method: 'POST',
      body: (0, _stringify2.default)({
        username: ersConfig.username,
        password: ersConfig.password
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    })).json();

    const token = _ref2.token;


    const authFetch = function authFetch(apiPath, options) {
      return (0, _nodeFetch2.default)(api(apiPath), (0, _assign2.default)({}, options || {}, {
        headers: (0, _assign2.default)({}, (options || {}).headers, { Authorization: `Bearer ${token}` })
      }));
    };

    const versions = yield (yield authFetch('api/version')).json();
    const existingVersion = versions.find(function (version) {
      return version.name === packageJSON.version;
    });

    let channel = 'stable';
    if (packageJSON.version.indexOf('beta') !== -1) {
      channel = 'beta';
    }
    if (packageJSON.version.indexOf('alpha') !== -1) {
      channel = 'alpha';
    }

    if (!existingVersion) {
      yield authFetch('api/version', {
        method: 'POST',
        body: (0, _stringify2.default)({
          channel: {
            name: channel
          },
          name: packageJSON.version,
          notes: ''
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }

    let uploaded = 0;
    yield (0, _oraHandler2.default)(`Uploading Artifacts ${uploaded}/${artifacts.length}`, (() => {
      var _ref3 = (0, _bluebird.coroutine)(function* (uploadSpinner) {
        const updateSpinner = function updateSpinner() {
          uploadSpinner.text = `Uploading Artifacts ${uploaded}/${artifacts.length}`; // eslint-disable-line no-param-reassign
        };

        yield _promise2.default.all(artifacts.map(function (artifactPath) {
          return new _promise2.default((() => {
            var _ref4 = (0, _bluebird.coroutine)(function* (resolve, reject) {
              if (existingVersion) {
                const existingAsset = existingVersion.assets.find(function (asset) {
                  return asset.name === _path2.default.basename(artifactPath);
                });
                if (existingAsset) {
                  d('asset at path:', artifactPath, 'already exists on server');
                  uploaded += 1;
                  updateSpinner();
                  return;
                }
              }
              try {
                d('attempting to upload asset:', artifactPath);
                const artifactForm = new _formData2.default();
                artifactForm.append('token', token);
                artifactForm.append('version', packageJSON.version);
                artifactForm.append('platform', ersPlatform(platform, arch));
                artifactForm.append('file', _fsExtra2.default.createReadStream(artifactPath));
                yield authFetch('api/asset', {
                  method: 'POST',
                  body: artifactForm,
                  headers: artifactForm.getHeaders()
                });
                d('upload successful for asset:', artifactPath);
                uploaded += 1;
                updateSpinner();
              } catch (err) {
                reject(err);
              }
            });

            return function (_x3, _x4) {
              return _ref4.apply(this, arguments);
            };
          })());
        }));
      });

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    })());
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,