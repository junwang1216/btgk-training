'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _snapcraft = require('electron-installer-snap/snapcraft');

var _snapcraft2 = _interopRequireDefault(_snapcraft);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `forgeConfig.snapStore`:
 * * `release`: comma-separated list of channels to release to
 */
exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* ({ dir, artifacts, forgeConfig }) {
    const snapArtifacts = artifacts.filter(function (artifact) {
      return artifact.endsWith('.snap');
    });

    if (snapArtifacts.length === 0) {
      throw 'No snap files to upload. Please ensure that "snap" is listed in the "make_targets" in Forge config.';
    }

    const snapcraftCfgPath = _path2.default.join(dir, '.snapcraft', 'snapcraft.cfg');

    if (!(yield _fsExtra2.default.pathExists(snapcraftCfgPath))) {
      throw `Snapcraft credentials not found at "${snapcraftCfgPath}". It can be generated with the command "snapcraft export-login" (snapcraft 2.37 and above).`;
    }

    yield (0, _oraHandler2.default)('Pushing snap to the snap store', (0, _bluebird.coroutine)(function* () {
      const snapcraft = new _snapcraft2.default();
      yield snapcraft.run(dir, 'push', forgeConfig.snapStore, snapArtifacts);
    }));
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1Ymxpc2hlcnMvc25hcGNyYWZ0LmpzIl0sIm5hbWVzIjpbImRpciIsImFydGlmYWN0cyIsImZvcmdlQ29uZmlnIiwic25hcEFydGlmYWN0cyIsImZpbHRlciIsImFydGlmYWN0IiwiZW5kc1dpdGgiLCJsZW5ndGgiLCJzbmFwY3JhZnRDZmdQYXRoIiwiam9pbiIsInBhdGhFeGlzdHMiLCJzbmFwY3JhZnQiLCJydW4iLCJzbmFwU3RvcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7OztBQUVBOzs7OztzQ0FJZSxXQUFPLEVBQUVBLEdBQUYsRUFBT0MsU0FBUCxFQUFrQkMsV0FBbEIsRUFBUCxFQUEyQztBQUN4RCxVQUFNQyxnQkFBZ0JGLFVBQVVHLE1BQVYsQ0FBaUI7QUFBQSxhQUFZQyxTQUFTQyxRQUFULENBQWtCLE9BQWxCLENBQVo7QUFBQSxLQUFqQixDQUF0Qjs7QUFFQSxRQUFJSCxjQUFjSSxNQUFkLEtBQXlCLENBQTdCLEVBQWdDO0FBQzlCLFlBQU0scUdBQU47QUFDRDs7QUFFRCxVQUFNQyxtQkFBbUIsZUFBS0MsSUFBTCxDQUFVVCxHQUFWLEVBQWUsWUFBZixFQUE2QixlQUE3QixDQUF6Qjs7QUFFQSxRQUFJLEVBQUMsTUFBTSxrQkFBR1UsVUFBSCxDQUFjRixnQkFBZCxDQUFQLENBQUosRUFBNEM7QUFDMUMsWUFBTyx1Q0FBc0NBLGdCQUFpQiw4RkFBOUQ7QUFDRDs7QUFFRCxVQUFNLDBCQUFTLGdDQUFULDJCQUEyQyxhQUFZO0FBQzNELFlBQU1HLFlBQVkseUJBQWxCO0FBQ0EsWUFBTUEsVUFBVUMsR0FBVixDQUFjWixHQUFkLEVBQW1CLE1BQW5CLEVBQTJCRSxZQUFZVyxTQUF2QyxFQUFrRFYsYUFBbEQsQ0FBTjtBQUNELEtBSEssRUFBTjtBQUlELEciLCJmaWxlIjoicHVibGlzaGVycy9zbmFwY3JhZnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgU25hcGNyYWZ0IGZyb20gJ2VsZWN0cm9uLWluc3RhbGxlci1zbmFwL3NuYXBjcmFmdCc7XG5cbmltcG9ydCBhc3luY09yYSBmcm9tICcuLi91dGlsL29yYS1oYW5kbGVyJztcblxuLyoqXG4gKiBgZm9yZ2VDb25maWcuc25hcFN0b3JlYDpcbiAqICogYHJlbGVhc2VgOiBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBjaGFubmVscyB0byByZWxlYXNlIHRvXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh7IGRpciwgYXJ0aWZhY3RzLCBmb3JnZUNvbmZpZyB9KSA9PiB7XG4gIGNvbnN0IHNuYXBBcnRpZmFjdHMgPSBhcnRpZmFjdHMuZmlsdGVyKGFydGlmYWN0ID0+IGFydGlmYWN0LmVuZHNXaXRoKCcuc25hcCcpKTtcblxuICBpZiAoc25hcEFydGlmYWN0cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyAnTm8gc25hcCBmaWxlcyB0byB1cGxvYWQuIFBsZWFzZSBlbnN1cmUgdGhhdCBcInNuYXBcIiBpcyBsaXN0ZWQgaW4gdGhlIFwibWFrZV90YXJnZXRzXCIgaW4gRm9yZ2UgY29uZmlnLic7XG4gIH1cblxuICBjb25zdCBzbmFwY3JhZnRDZmdQYXRoID0gcGF0aC5qb2luKGRpciwgJy5zbmFwY3JhZnQnLCAnc25hcGNyYWZ0LmNmZycpO1xuXG4gIGlmICghYXdhaXQgZnMucGF0aEV4aXN0cyhzbmFwY3JhZnRDZmdQYXRoKSkge1xuICAgIHRocm93IGBTbmFwY3JhZnQgY3JlZGVudGlhbHMgbm90IGZvdW5kIGF0IFwiJHtzbmFwY3JhZnRDZmdQYXRofVwiLiBJdCBjYW4gYmUgZ2VuZXJhdGVkIHdpdGggdGhlIGNvbW1hbmQgXCJzbmFwY3JhZnQgZXhwb3J0LWxvZ2luXCIgKHNuYXBjcmFmdCAyLjM3IGFuZCBhYm92ZSkuYDtcbiAgfVxuXG4gIGF3YWl0IGFzeW5jT3JhKCdQdXNoaW5nIHNuYXAgdG8gdGhlIHNuYXAgc3RvcmUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc25hcGNyYWZ0ID0gbmV3IFNuYXBjcmFmdCgpO1xuICAgIGF3YWl0IHNuYXBjcmFmdC5ydW4oZGlyLCAncHVzaCcsIGZvcmdlQ29uZmlnLnNuYXBTdG9yZSwgc25hcEFydGlmYWN0cyk7XG4gIH0pO1xufTtcbiJdfQ==