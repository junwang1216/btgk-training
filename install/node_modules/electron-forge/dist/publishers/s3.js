'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _bluebird = require('bluebird');

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _s = require('s3');

var _s2 = _interopRequireDefault(_s);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:publish:s3');

_awsSdk2.default.util.update(_awsSdk2.default.S3.prototype, {
  addExpect100Continue: function addExpect100Continue() {
    // Hack around large upload issue: https://github.com/andrewrk/node-s3-client/issues/74
  }
});

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* ({ artifacts, packageJSON, forgeConfig, authToken, tag }) {
    const s3Config = forgeConfig.s3;

    s3Config.secretAccessKey = s3Config.secretAccessKey || authToken;

    const s3Client = new _awsSdk2.default.S3({
      accessKeyId: s3Config.accessKeyId,
      secretAccessKey: s3Config.secretAccessKey
    });

    if (!s3Client.config.credentials || !s3Config.bucket) {
      throw 'In order to publish to s3 you must set the "s3.accessKeyId", "process.env.ELECTRON_FORGE_S3_SECRET_ACCESS_KEY" and "s3.bucket" properties in your forge config. See the docs for more info'; // eslint-disable-line
    }

    d('creating s3 client with options:', s3Config);

    const client = _s2.default.createClient({
      s3Client
    });
    client.s3.addExpect100Continue = function () {};

    const folder = s3Config.folder || tag || packageJSON.version;

    let uploaded = 0;
    yield (0, _oraHandler2.default)(`Uploading Artifacts ${uploaded}/${artifacts.length}`, (() => {
      var _ref2 = (0, _bluebird.coroutine)(function* (uploadSpinner) {
        const updateSpinner = function updateSpinner() {
          uploadSpinner.text = `Uploading Artifacts ${uploaded}/${artifacts.length}`; // eslint-disable-line
        };

        yield _promise2.default.all(artifacts.map(function (artifactPath) {
          return new _promise2.default((() => {
            var _ref3 = (0, _bluebird.coroutine)(function* (resolve, reject) {
              const done = function done(err) {
                if (err) return reject(err);
                uploaded += 1;
                updateSpinner();
                resolve();
              };

              const uploader = client.uploadFile({
                localFile: artifactPath,
                s3Params: {
                  Bucket: s3Config.bucket,
                  Key: `${folder}/${_path2.default.basename(artifactPath)}`,
                  ACL: s3Config.public ? 'public-read' : 'private'
                }
              });
              d('uploading:', artifactPath);

              uploader.on('error', function (err) {
                return done(err);
              });
              uploader.on('progress', function () {
                d(`Upload Progress (${_path2.default.basename(artifactPath)}) ${Math.round(uploader.progressAmount / uploader.progressTotal * 100)}%`);
              });
              uploader.on('end', function () {
                return done();
              });
            });

            return function (_x3, _x4) {
              return _ref3.apply(this, arguments);
            };
          })());
        }));
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    })());
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1Ymxpc2hlcnMvczMuanMiXSwibmFtZXMiOlsiZCIsInV0aWwiLCJ1cGRhdGUiLCJTMyIsInByb3RvdHlwZSIsImFkZEV4cGVjdDEwMENvbnRpbnVlIiwiYXJ0aWZhY3RzIiwicGFja2FnZUpTT04iLCJmb3JnZUNvbmZpZyIsImF1dGhUb2tlbiIsInRhZyIsInMzQ29uZmlnIiwiczMiLCJzZWNyZXRBY2Nlc3NLZXkiLCJzM0NsaWVudCIsImFjY2Vzc0tleUlkIiwiY29uZmlnIiwiY3JlZGVudGlhbHMiLCJidWNrZXQiLCJjbGllbnQiLCJjcmVhdGVDbGllbnQiLCJmb2xkZXIiLCJ2ZXJzaW9uIiwidXBsb2FkZWQiLCJsZW5ndGgiLCJ1cGxvYWRTcGlubmVyIiwidXBkYXRlU3Bpbm5lciIsInRleHQiLCJhbGwiLCJtYXAiLCJyZXNvbHZlIiwicmVqZWN0IiwiZG9uZSIsImVyciIsInVwbG9hZGVyIiwidXBsb2FkRmlsZSIsImxvY2FsRmlsZSIsImFydGlmYWN0UGF0aCIsInMzUGFyYW1zIiwiQnVja2V0IiwiS2V5IiwiYmFzZW5hbWUiLCJBQ0wiLCJwdWJsaWMiLCJvbiIsIk1hdGgiLCJyb3VuZCIsInByb2dyZXNzQW1vdW50IiwicHJvZ3Jlc3NUb3RhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUEsTUFBTUEsSUFBSSxxQkFBTSwyQkFBTixDQUFWOztBQUVBLGlCQUFJQyxJQUFKLENBQVNDLE1BQVQsQ0FBZ0IsaUJBQUlDLEVBQUosQ0FBT0MsU0FBdkIsRUFBa0M7QUFDaENDLHdCQUFzQixTQUFTQSxvQkFBVCxHQUFnQztBQUNwRDtBQUNEO0FBSCtCLENBQWxDOzs7c0NBTWUsV0FBTyxFQUFFQyxTQUFGLEVBQWFDLFdBQWIsRUFBMEJDLFdBQTFCLEVBQXVDQyxTQUF2QyxFQUFrREMsR0FBbEQsRUFBUCxFQUFtRTtBQUNoRixVQUFNQyxXQUFXSCxZQUFZSSxFQUE3Qjs7QUFFQUQsYUFBU0UsZUFBVCxHQUEyQkYsU0FBU0UsZUFBVCxJQUE0QkosU0FBdkQ7O0FBRUEsVUFBTUssV0FBVyxJQUFJLGlCQUFJWCxFQUFSLENBQVc7QUFDMUJZLG1CQUFhSixTQUFTSSxXQURJO0FBRTFCRix1QkFBaUJGLFNBQVNFO0FBRkEsS0FBWCxDQUFqQjs7QUFLQSxRQUFJLENBQUNDLFNBQVNFLE1BQVQsQ0FBZ0JDLFdBQWpCLElBQWdDLENBQUNOLFNBQVNPLE1BQTlDLEVBQXNEO0FBQ3BELFlBQU0sNExBQU4sQ0FEb0QsQ0FDZ0o7QUFDck07O0FBRURsQixNQUFFLGtDQUFGLEVBQXNDVyxRQUF0Qzs7QUFFQSxVQUFNUSxTQUFTLFlBQUdDLFlBQUgsQ0FBZ0I7QUFDN0JOO0FBRDZCLEtBQWhCLENBQWY7QUFHQUssV0FBT1AsRUFBUCxDQUFVUCxvQkFBVixHQUFpQyxZQUFNLENBQUUsQ0FBekM7O0FBRUEsVUFBTWdCLFNBQVNWLFNBQVNVLE1BQVQsSUFBbUJYLEdBQW5CLElBQTBCSCxZQUFZZSxPQUFyRDs7QUFFQSxRQUFJQyxXQUFXLENBQWY7QUFDQSxVQUFNLDBCQUFVLHVCQUFzQkEsUUFBUyxJQUFHakIsVUFBVWtCLE1BQU8sRUFBN0Q7QUFBQSwyQ0FBZ0UsV0FBT0MsYUFBUCxFQUF5QjtBQUM3RixjQUFNQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQU07QUFDMUJELHdCQUFjRSxJQUFkLEdBQXNCLHVCQUFzQkosUUFBUyxJQUFHakIsVUFBVWtCLE1BQU8sRUFBekUsQ0FEMEIsQ0FDa0Q7QUFDN0UsU0FGRDs7QUFJQSxjQUFNLGtCQUFRSSxHQUFSLENBQVl0QixVQUFVdUIsR0FBVixDQUFjO0FBQUEsaUJBQzlCO0FBQUEsaURBQVksV0FBT0MsT0FBUCxFQUFnQkMsTUFBaEIsRUFBMkI7QUFDckMsb0JBQU1DLE9BQU8sU0FBUEEsSUFBTyxDQUFDQyxHQUFELEVBQVM7QUFDcEIsb0JBQUlBLEdBQUosRUFBUyxPQUFPRixPQUFPRSxHQUFQLENBQVA7QUFDVFYsNEJBQVksQ0FBWjtBQUNBRztBQUNBSTtBQUNELGVBTEQ7O0FBT0Esb0JBQU1JLFdBQVdmLE9BQU9nQixVQUFQLENBQWtCO0FBQ2pDQywyQkFBV0MsWUFEc0I7QUFFakNDLDBCQUFVO0FBQ1JDLDBCQUFRNUIsU0FBU08sTUFEVDtBQUVSc0IsdUJBQU0sR0FBRW5CLE1BQU8sSUFBRyxlQUFLb0IsUUFBTCxDQUFjSixZQUFkLENBQTRCLEVBRnRDO0FBR1JLLHVCQUFLL0IsU0FBU2dDLE1BQVQsR0FBa0IsYUFBbEIsR0FBa0M7QUFIL0I7QUFGdUIsZUFBbEIsQ0FBakI7QUFRQTNDLGdCQUFFLFlBQUYsRUFBZ0JxQyxZQUFoQjs7QUFFQUgsdUJBQVNVLEVBQVQsQ0FBWSxPQUFaLEVBQXFCO0FBQUEsdUJBQU9aLEtBQUtDLEdBQUwsQ0FBUDtBQUFBLGVBQXJCO0FBQ0FDLHVCQUFTVSxFQUFULENBQVksVUFBWixFQUF3QixZQUFNO0FBQzVCNUMsa0JBQUcsb0JBQW1CLGVBQUt5QyxRQUFMLENBQWNKLFlBQWQsQ0FBNEIsS0FBSVEsS0FBS0MsS0FBTCxDQUFZWixTQUFTYSxjQUFULEdBQTBCYixTQUFTYyxhQUFwQyxHQUFxRCxHQUFoRSxDQUFxRSxHQUEzSDtBQUNELGVBRkQ7QUFHQWQsdUJBQVNVLEVBQVQsQ0FBWSxLQUFaLEVBQW1CO0FBQUEsdUJBQU1aLE1BQU47QUFBQSxlQUFuQjtBQUNELGFBdkJEOztBQUFBO0FBQUE7QUFBQTtBQUFBLGVBRDhCO0FBQUEsU0FBZCxDQUFaLENBQU47QUEwQkQsT0EvQks7O0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBTjtBQWdDRCxHIiwiZmlsZSI6InB1Ymxpc2hlcnMvczMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHMzIGZyb20gJ3MzJztcblxuaW1wb3J0IGFzeW5jT3JhIGZyb20gJy4uL3V0aWwvb3JhLWhhbmRsZXInO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOnB1Ymxpc2g6czMnKTtcblxuQVdTLnV0aWwudXBkYXRlKEFXUy5TMy5wcm90b3R5cGUsIHtcbiAgYWRkRXhwZWN0MTAwQ29udGludWU6IGZ1bmN0aW9uIGFkZEV4cGVjdDEwMENvbnRpbnVlKCkge1xuICAgIC8vIEhhY2sgYXJvdW5kIGxhcmdlIHVwbG9hZCBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZHJld3JrL25vZGUtczMtY2xpZW50L2lzc3Vlcy83NFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh7IGFydGlmYWN0cywgcGFja2FnZUpTT04sIGZvcmdlQ29uZmlnLCBhdXRoVG9rZW4sIHRhZyB9KSA9PiB7XG4gIGNvbnN0IHMzQ29uZmlnID0gZm9yZ2VDb25maWcuczM7XG5cbiAgczNDb25maWcuc2VjcmV0QWNjZXNzS2V5ID0gczNDb25maWcuc2VjcmV0QWNjZXNzS2V5IHx8IGF1dGhUb2tlbjtcblxuICBjb25zdCBzM0NsaWVudCA9IG5ldyBBV1MuUzMoe1xuICAgIGFjY2Vzc0tleUlkOiBzM0NvbmZpZy5hY2Nlc3NLZXlJZCxcbiAgICBzZWNyZXRBY2Nlc3NLZXk6IHMzQ29uZmlnLnNlY3JldEFjY2Vzc0tleSxcbiAgfSk7XG5cbiAgaWYgKCFzM0NsaWVudC5jb25maWcuY3JlZGVudGlhbHMgfHwgIXMzQ29uZmlnLmJ1Y2tldCkge1xuICAgIHRocm93ICdJbiBvcmRlciB0byBwdWJsaXNoIHRvIHMzIHlvdSBtdXN0IHNldCB0aGUgXCJzMy5hY2Nlc3NLZXlJZFwiLCBcInByb2Nlc3MuZW52LkVMRUNUUk9OX0ZPUkdFX1MzX1NFQ1JFVF9BQ0NFU1NfS0VZXCIgYW5kIFwiczMuYnVja2V0XCIgcHJvcGVydGllcyBpbiB5b3VyIGZvcmdlIGNvbmZpZy4gU2VlIHRoZSBkb2NzIGZvciBtb3JlIGluZm8nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICBkKCdjcmVhdGluZyBzMyBjbGllbnQgd2l0aCBvcHRpb25zOicsIHMzQ29uZmlnKTtcblxuICBjb25zdCBjbGllbnQgPSBzMy5jcmVhdGVDbGllbnQoe1xuICAgIHMzQ2xpZW50LFxuICB9KTtcbiAgY2xpZW50LnMzLmFkZEV4cGVjdDEwMENvbnRpbnVlID0gKCkgPT4ge307XG5cbiAgY29uc3QgZm9sZGVyID0gczNDb25maWcuZm9sZGVyIHx8IHRhZyB8fCBwYWNrYWdlSlNPTi52ZXJzaW9uO1xuXG4gIGxldCB1cGxvYWRlZCA9IDA7XG4gIGF3YWl0IGFzeW5jT3JhKGBVcGxvYWRpbmcgQXJ0aWZhY3RzICR7dXBsb2FkZWR9LyR7YXJ0aWZhY3RzLmxlbmd0aH1gLCBhc3luYyAodXBsb2FkU3Bpbm5lcikgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZVNwaW5uZXIgPSAoKSA9PiB7XG4gICAgICB1cGxvYWRTcGlubmVyLnRleHQgPSBgVXBsb2FkaW5nIEFydGlmYWN0cyAke3VwbG9hZGVkfS8ke2FydGlmYWN0cy5sZW5ndGh9YDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIH07XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChhcnRpZmFjdHMubWFwKGFydGlmYWN0UGF0aCA9PlxuICAgICAgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBkb25lID0gKGVycikgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICB1cGxvYWRlZCArPSAxO1xuICAgICAgICAgIHVwZGF0ZVNwaW5uZXIoKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdXBsb2FkZXIgPSBjbGllbnQudXBsb2FkRmlsZSh7XG4gICAgICAgICAgbG9jYWxGaWxlOiBhcnRpZmFjdFBhdGgsXG4gICAgICAgICAgczNQYXJhbXM6IHtcbiAgICAgICAgICAgIEJ1Y2tldDogczNDb25maWcuYnVja2V0LFxuICAgICAgICAgICAgS2V5OiBgJHtmb2xkZXJ9LyR7cGF0aC5iYXNlbmFtZShhcnRpZmFjdFBhdGgpfWAsXG4gICAgICAgICAgICBBQ0w6IHMzQ29uZmlnLnB1YmxpYyA/ICdwdWJsaWMtcmVhZCcgOiAncHJpdmF0ZScsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGQoJ3VwbG9hZGluZzonLCBhcnRpZmFjdFBhdGgpO1xuXG4gICAgICAgIHVwbG9hZGVyLm9uKCdlcnJvcicsIGVyciA9PiBkb25lKGVycikpO1xuICAgICAgICB1cGxvYWRlci5vbigncHJvZ3Jlc3MnLCAoKSA9PiB7XG4gICAgICAgICAgZChgVXBsb2FkIFByb2dyZXNzICgke3BhdGguYmFzZW5hbWUoYXJ0aWZhY3RQYXRoKX0pICR7TWF0aC5yb3VuZCgodXBsb2FkZXIucHJvZ3Jlc3NBbW91bnQgLyB1cGxvYWRlci5wcm9ncmVzc1RvdGFsKSAqIDEwMCl9JWApO1xuICAgICAgICB9KTtcbiAgICAgICAgdXBsb2FkZXIub24oJ2VuZCcsICgpID0+IGRvbmUoKSk7XG4gICAgICB9KVxuICAgICkpO1xuICB9KTtcbn07XG4iXX0=