#!/usr/bin/env node
'use strict';

var _bluebird = require('bluebird');

require('colors');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _tabtab = require('tabtab');

var _tabtab2 = _interopRequireDefault(_tabtab);

require('./util/terminate');

var _oraHandler = require('./util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

var _checkSystem = require('./util/check-system');

var _checkSystem2 = _interopRequireDefault(_checkSystem);

var _config = require('./util/config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const originalSC = _commander2.default.executeSubCommand.bind(_commander2.default);
_commander2.default.executeSubCommand = (argv, args, unknown) => {
  let indexOfDoubleDash = process.argv.indexOf('--');
  indexOfDoubleDash = indexOfDoubleDash < 0 ? process.argv.length + 1 : indexOfDoubleDash;

  const passThroughArgs = args.filter(arg => process.argv.indexOf(arg) > indexOfDoubleDash);
  const normalArgs = args.filter(arg => process.argv.indexOf(arg) <= indexOfDoubleDash);

  let newArgs = args;
  let newUnknown = unknown;
  if (passThroughArgs.length > 0) {
    newArgs = normalArgs.concat(unknown).concat('--').concat(passThroughArgs);
    newUnknown = [];
  }
  return originalSC(argv, newArgs, newUnknown);
};

_commander2.default.version(require('../package.json').version).option('--verbose', 'Enables verbose mode').command('init', 'Initialize a new Electron application').command('import', 'Attempts to navigate you through the process of importing an existing project to "electron-forge"').command('lint', 'Lints the current Electron application').command('package', 'Package the current Electron application').command('make', 'Generate distributables for the current Electron application').command('start', 'Start the current Electron application').command('publish', 'Publish the current Electron application to GitHub').command('install', 'Install an Electron application from GitHub');

const tab = (0, _tabtab2.default)({
  name: 'electron-forge'
});
tab.on('electron-forge', (data, done) => {
  if (data.line.split(' ').length <= 2) {
    done(null, _commander2.default.commands.filter(cmd => cmd._name.startsWith(data.lastPartial)).map(cmd => `${cmd._name}:${cmd._description}`).sort());
  } else {
    done(null, []);
  }
});
tab.start();

if (process.argv[2] !== 'completion') {
  (0, _bluebird.coroutine)(function* () {
    let goodSystem;
    yield (0, _oraHandler2.default)('Checking your system', (() => {
      var _ref2 = (0, _bluebird.coroutine)(function* (ora) {
        goodSystem = yield (0, _checkSystem2.default)(ora);
      });

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    })());

    if (!goodSystem) {
      console.error(('It looks like you are missing some dependencies you need to get Electron running.\n' + 'Make sure you have git installed and Node.js version 6.0.0+').red);
      process.exit(1);
    }

    _commander2.default.parse(process.argv);

    _config2.default.reset();
    _config2.default.set('verbose', !!_commander2.default.verbose);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZWN0cm9uLWZvcmdlLmpzIl0sIm5hbWVzIjpbIm9yaWdpbmFsU0MiLCJleGVjdXRlU3ViQ29tbWFuZCIsImJpbmQiLCJhcmd2IiwiYXJncyIsInVua25vd24iLCJpbmRleE9mRG91YmxlRGFzaCIsInByb2Nlc3MiLCJpbmRleE9mIiwibGVuZ3RoIiwicGFzc1Rocm91Z2hBcmdzIiwiZmlsdGVyIiwiYXJnIiwibm9ybWFsQXJncyIsIm5ld0FyZ3MiLCJuZXdVbmtub3duIiwiY29uY2F0IiwidmVyc2lvbiIsInJlcXVpcmUiLCJvcHRpb24iLCJjb21tYW5kIiwidGFiIiwibmFtZSIsIm9uIiwiZGF0YSIsImRvbmUiLCJsaW5lIiwic3BsaXQiLCJjb21tYW5kcyIsImNtZCIsIl9uYW1lIiwic3RhcnRzV2l0aCIsImxhc3RQYXJ0aWFsIiwibWFwIiwiX2Rlc2NyaXB0aW9uIiwic29ydCIsInN0YXJ0IiwiZ29vZFN5c3RlbSIsIm9yYSIsImNvbnNvbGUiLCJlcnJvciIsInJlZCIsImV4aXQiLCJwYXJzZSIsInJlc2V0Iiwic2V0IiwidmVyYm9zZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLGFBQWEsb0JBQVFDLGlCQUFSLENBQTBCQyxJQUExQixxQkFBbkI7QUFDQSxvQkFBUUQsaUJBQVIsR0FBNEIsQ0FBQ0UsSUFBRCxFQUFPQyxJQUFQLEVBQWFDLE9BQWIsS0FBeUI7QUFDbkQsTUFBSUMsb0JBQW9CQyxRQUFRSixJQUFSLENBQWFLLE9BQWIsQ0FBcUIsSUFBckIsQ0FBeEI7QUFDQUYsc0JBQW9CQSxvQkFBb0IsQ0FBcEIsR0FBd0JDLFFBQVFKLElBQVIsQ0FBYU0sTUFBYixHQUFzQixDQUE5QyxHQUFrREgsaUJBQXRFOztBQUVBLFFBQU1JLGtCQUFrQk4sS0FBS08sTUFBTCxDQUFZQyxPQUFPTCxRQUFRSixJQUFSLENBQWFLLE9BQWIsQ0FBcUJJLEdBQXJCLElBQTRCTixpQkFBL0MsQ0FBeEI7QUFDQSxRQUFNTyxhQUFhVCxLQUFLTyxNQUFMLENBQVlDLE9BQU9MLFFBQVFKLElBQVIsQ0FBYUssT0FBYixDQUFxQkksR0FBckIsS0FBNkJOLGlCQUFoRCxDQUFuQjs7QUFFQSxNQUFJUSxVQUFVVixJQUFkO0FBQ0EsTUFBSVcsYUFBYVYsT0FBakI7QUFDQSxNQUFJSyxnQkFBZ0JELE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQzlCSyxjQUFVRCxXQUFXRyxNQUFYLENBQWtCWCxPQUFsQixFQUEyQlcsTUFBM0IsQ0FBa0MsSUFBbEMsRUFBd0NBLE1BQXhDLENBQStDTixlQUEvQyxDQUFWO0FBQ0FLLGlCQUFhLEVBQWI7QUFDRDtBQUNELFNBQU9mLFdBQVdHLElBQVgsRUFBaUJXLE9BQWpCLEVBQTBCQyxVQUExQixDQUFQO0FBQ0QsQ0FkRDs7QUFnQkEsb0JBQ0dFLE9BREgsQ0FDV0MsUUFBUSxpQkFBUixFQUEyQkQsT0FEdEMsRUFFR0UsTUFGSCxDQUVVLFdBRlYsRUFFdUIsc0JBRnZCLEVBR0dDLE9BSEgsQ0FHVyxNQUhYLEVBR21CLHVDQUhuQixFQUlHQSxPQUpILENBSVcsUUFKWCxFQUlxQixtR0FKckIsRUFLR0EsT0FMSCxDQUtXLE1BTFgsRUFLbUIsd0NBTG5CLEVBTUdBLE9BTkgsQ0FNVyxTQU5YLEVBTXNCLDBDQU50QixFQU9HQSxPQVBILENBT1csTUFQWCxFQU9tQiw4REFQbkIsRUFRR0EsT0FSSCxDQVFXLE9BUlgsRUFRb0Isd0NBUnBCLEVBU0dBLE9BVEgsQ0FTVyxTQVRYLEVBU3NCLG9EQVR0QixFQVVHQSxPQVZILENBVVcsU0FWWCxFQVVzQiw2Q0FWdEI7O0FBWUEsTUFBTUMsTUFBTSxzQkFBTztBQUNqQkMsUUFBTTtBQURXLENBQVAsQ0FBWjtBQUdBRCxJQUFJRSxFQUFKLENBQU8sZ0JBQVAsRUFBeUIsQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLEtBQWdCO0FBQ3ZDLE1BQUlELEtBQUtFLElBQUwsQ0FBVUMsS0FBVixDQUFnQixHQUFoQixFQUFxQmxCLE1BQXJCLElBQStCLENBQW5DLEVBQXNDO0FBQ3BDZ0IsU0FDRSxJQURGLEVBRUUsb0JBQVFHLFFBQVIsQ0FDR2pCLE1BREgsQ0FDVWtCLE9BQU9BLElBQUlDLEtBQUosQ0FBVUMsVUFBVixDQUFxQlAsS0FBS1EsV0FBMUIsQ0FEakIsRUFFR0MsR0FGSCxDQUVPSixPQUFRLEdBQUVBLElBQUlDLEtBQU0sSUFBR0QsSUFBSUssWUFBYSxFQUYvQyxFQUVrREMsSUFGbEQsRUFGRjtBQU1ELEdBUEQsTUFPTztBQUNMVixTQUFLLElBQUwsRUFBVyxFQUFYO0FBQ0Q7QUFDRixDQVhEO0FBWUFKLElBQUllLEtBQUo7O0FBRUEsSUFBSTdCLFFBQVFKLElBQVIsQ0FBYSxDQUFiLE1BQW9CLFlBQXhCLEVBQXNDO0FBQ3BDLDJCQUFDLGFBQVk7QUFDWCxRQUFJa0MsVUFBSjtBQUNBLFVBQU0sMEJBQVMsc0JBQVQ7QUFBQSwyQ0FBaUMsV0FBT0MsR0FBUCxFQUFlO0FBQ3BERCxxQkFBYSxNQUFNLDJCQUFZQyxHQUFaLENBQW5CO0FBQ0QsT0FGSzs7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUFOOztBQUlBLFFBQUksQ0FBQ0QsVUFBTCxFQUFpQjtBQUNmRSxjQUFRQyxLQUFSLENBQWMsQ0FBQyx3RkFDRCw2REFEQSxFQUMrREMsR0FEN0U7QUFFQWxDLGNBQVFtQyxJQUFSLENBQWEsQ0FBYjtBQUNEOztBQUVELHdCQUFRQyxLQUFSLENBQWNwQyxRQUFRSixJQUF0Qjs7QUFFQSxxQkFBT3lDLEtBQVA7QUFDQSxxQkFBT0MsR0FBUCxDQUFXLFNBQVgsRUFBc0IsQ0FBQyxDQUFDLG9CQUFRQyxPQUFoQztBQUNELEdBaEJEO0FBaUJEIiwiZmlsZSI6ImVsZWN0cm9uLWZvcmdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgJ2NvbG9ycyc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHRhYnRhYiBmcm9tICd0YWJ0YWInO1xuXG5pbXBvcnQgJy4vdXRpbC90ZXJtaW5hdGUnO1xuaW1wb3J0IGFzeW5jT3JhIGZyb20gJy4vdXRpbC9vcmEtaGFuZGxlcic7XG5pbXBvcnQgY2hlY2tTeXN0ZW0gZnJvbSAnLi91dGlsL2NoZWNrLXN5c3RlbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vdXRpbC9jb25maWcnO1xuXG5jb25zdCBvcmlnaW5hbFNDID0gcHJvZ3JhbS5leGVjdXRlU3ViQ29tbWFuZC5iaW5kKHByb2dyYW0pO1xucHJvZ3JhbS5leGVjdXRlU3ViQ29tbWFuZCA9IChhcmd2LCBhcmdzLCB1bmtub3duKSA9PiB7XG4gIGxldCBpbmRleE9mRG91YmxlRGFzaCA9IHByb2Nlc3MuYXJndi5pbmRleE9mKCctLScpO1xuICBpbmRleE9mRG91YmxlRGFzaCA9IGluZGV4T2ZEb3VibGVEYXNoIDwgMCA/IHByb2Nlc3MuYXJndi5sZW5ndGggKyAxIDogaW5kZXhPZkRvdWJsZURhc2g7XG5cbiAgY29uc3QgcGFzc1Rocm91Z2hBcmdzID0gYXJncy5maWx0ZXIoYXJnID0+IHByb2Nlc3MuYXJndi5pbmRleE9mKGFyZykgPiBpbmRleE9mRG91YmxlRGFzaCk7XG4gIGNvbnN0IG5vcm1hbEFyZ3MgPSBhcmdzLmZpbHRlcihhcmcgPT4gcHJvY2Vzcy5hcmd2LmluZGV4T2YoYXJnKSA8PSBpbmRleE9mRG91YmxlRGFzaCk7XG5cbiAgbGV0IG5ld0FyZ3MgPSBhcmdzO1xuICBsZXQgbmV3VW5rbm93biA9IHVua25vd247XG4gIGlmIChwYXNzVGhyb3VnaEFyZ3MubGVuZ3RoID4gMCkge1xuICAgIG5ld0FyZ3MgPSBub3JtYWxBcmdzLmNvbmNhdCh1bmtub3duKS5jb25jYXQoJy0tJykuY29uY2F0KHBhc3NUaHJvdWdoQXJncyk7XG4gICAgbmV3VW5rbm93biA9IFtdO1xuICB9XG4gIHJldHVybiBvcmlnaW5hbFNDKGFyZ3YsIG5ld0FyZ3MsIG5ld1Vua25vd24pO1xufTtcblxucHJvZ3JhbVxuICAudmVyc2lvbihyZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uKVxuICAub3B0aW9uKCctLXZlcmJvc2UnLCAnRW5hYmxlcyB2ZXJib3NlIG1vZGUnKVxuICAuY29tbWFuZCgnaW5pdCcsICdJbml0aWFsaXplIGEgbmV3IEVsZWN0cm9uIGFwcGxpY2F0aW9uJylcbiAgLmNvbW1hbmQoJ2ltcG9ydCcsICdBdHRlbXB0cyB0byBuYXZpZ2F0ZSB5b3UgdGhyb3VnaCB0aGUgcHJvY2VzcyBvZiBpbXBvcnRpbmcgYW4gZXhpc3RpbmcgcHJvamVjdCB0byBcImVsZWN0cm9uLWZvcmdlXCInKVxuICAuY29tbWFuZCgnbGludCcsICdMaW50cyB0aGUgY3VycmVudCBFbGVjdHJvbiBhcHBsaWNhdGlvbicpXG4gIC5jb21tYW5kKCdwYWNrYWdlJywgJ1BhY2thZ2UgdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgnbWFrZScsICdHZW5lcmF0ZSBkaXN0cmlidXRhYmxlcyBmb3IgdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgnc3RhcnQnLCAnU3RhcnQgdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgncHVibGlzaCcsICdQdWJsaXNoIHRoZSBjdXJyZW50IEVsZWN0cm9uIGFwcGxpY2F0aW9uIHRvIEdpdEh1YicpXG4gIC5jb21tYW5kKCdpbnN0YWxsJywgJ0luc3RhbGwgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24gZnJvbSBHaXRIdWInKTtcblxuY29uc3QgdGFiID0gdGFidGFiKHtcbiAgbmFtZTogJ2VsZWN0cm9uLWZvcmdlJyxcbn0pO1xudGFiLm9uKCdlbGVjdHJvbi1mb3JnZScsIChkYXRhLCBkb25lKSA9PiB7XG4gIGlmIChkYXRhLmxpbmUuc3BsaXQoJyAnKS5sZW5ndGggPD0gMikge1xuICAgIGRvbmUoXG4gICAgICBudWxsLFxuICAgICAgcHJvZ3JhbS5jb21tYW5kc1xuICAgICAgICAuZmlsdGVyKGNtZCA9PiBjbWQuX25hbWUuc3RhcnRzV2l0aChkYXRhLmxhc3RQYXJ0aWFsKSlcbiAgICAgICAgLm1hcChjbWQgPT4gYCR7Y21kLl9uYW1lfToke2NtZC5fZGVzY3JpcHRpb259YCkuc29ydCgpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKG51bGwsIFtdKTtcbiAgfVxufSk7XG50YWIuc3RhcnQoKTtcblxuaWYgKHByb2Nlc3MuYXJndlsyXSAhPT0gJ2NvbXBsZXRpb24nKSB7XG4gIChhc3luYyAoKSA9PiB7XG4gICAgbGV0IGdvb2RTeXN0ZW07XG4gICAgYXdhaXQgYXN5bmNPcmEoJ0NoZWNraW5nIHlvdXIgc3lzdGVtJywgYXN5bmMgKG9yYSkgPT4ge1xuICAgICAgZ29vZFN5c3RlbSA9IGF3YWl0IGNoZWNrU3lzdGVtKG9yYSk7XG4gICAgfSk7XG5cbiAgICBpZiAoIWdvb2RTeXN0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgbWlzc2luZyBzb21lIGRlcGVuZGVuY2llcyB5b3UgbmVlZCB0byBnZXQgRWxlY3Ryb24gcnVubmluZy5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJ01ha2Ugc3VyZSB5b3UgaGF2ZSBnaXQgaW5zdGFsbGVkIGFuZCBOb2RlLmpzIHZlcnNpb24gNi4wLjArJykucmVkKTtcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG5cbiAgICBwcm9ncmFtLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbiAgICBjb25maWcucmVzZXQoKTtcbiAgICBjb25maWcuc2V0KCd2ZXJib3NlJywgISFwcm9ncmFtLnZlcmJvc2UpO1xuICB9KSgpO1xufVxuIl19