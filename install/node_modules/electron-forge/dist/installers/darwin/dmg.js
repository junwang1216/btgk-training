'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _crossSpawnPromise = require('cross-spawn-promise');

var _crossSpawnPromise2 = _interopRequireDefault(_crossSpawnPromise);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _hdiutil = require('../../util/hdiutil');

var _moveApp = require('../../util/move-app');

var _moveApp2 = _interopRequireDefault(_moveApp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (filePath, installSpinner) {
    const mounts = yield (0, _hdiutil.getMountedImages)();
    let targetMount = mounts.find(function (mount) {
      return mount.imagePath === filePath;
    });

    if (!targetMount) {
      targetMount = yield (0, _hdiutil.mountImage)(filePath);
    }

    try {
      const volumePath = _path2.default.resolve('/Volumes', targetMount.mountPath);
      const appName = (yield _fsExtra2.default.readdir(volumePath)).find(function (file) {
        return file.endsWith('.app');
      });
      if (!appName) {
        throw 'Failed to find .app file in DMG';
      }
      const appPath = _path2.default.resolve(volumePath, appName);
      const targetApplicationPath = `/Applications/${_path2.default.basename(appPath)}`;

      yield (0, _moveApp2.default)(appPath, targetApplicationPath, installSpinner, true);

      yield (0, _crossSpawnPromise2.default)('open', ['-R', targetApplicationPath], { detached: true });
    } finally {
      yield (0, _hdiutil.unmountImage)(targetMount);
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGxlcnMvZGFyd2luL2RtZy5qcyJdLCJuYW1lcyI6WyJmaWxlUGF0aCIsImluc3RhbGxTcGlubmVyIiwibW91bnRzIiwidGFyZ2V0TW91bnQiLCJmaW5kIiwibW91bnQiLCJpbWFnZVBhdGgiLCJ2b2x1bWVQYXRoIiwicmVzb2x2ZSIsIm1vdW50UGF0aCIsImFwcE5hbWUiLCJyZWFkZGlyIiwiZmlsZSIsImVuZHNXaXRoIiwiYXBwUGF0aCIsInRhcmdldEFwcGxpY2F0aW9uUGF0aCIsImJhc2VuYW1lIiwiZGV0YWNoZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7Ozs7Ozs7c0NBRWUsV0FBT0EsUUFBUCxFQUFpQkMsY0FBakIsRUFBb0M7QUFDakQsVUFBTUMsU0FBUyxNQUFNLGdDQUFyQjtBQUNBLFFBQUlDLGNBQWNELE9BQU9FLElBQVAsQ0FBWTtBQUFBLGFBQVNDLE1BQU1DLFNBQU4sS0FBb0JOLFFBQTdCO0FBQUEsS0FBWixDQUFsQjs7QUFFQSxRQUFJLENBQUNHLFdBQUwsRUFBa0I7QUFDaEJBLG9CQUFjLE1BQU0seUJBQVdILFFBQVgsQ0FBcEI7QUFDRDs7QUFFRCxRQUFJO0FBQ0YsWUFBTU8sYUFBYSxlQUFLQyxPQUFMLENBQWEsVUFBYixFQUF5QkwsWUFBWU0sU0FBckMsQ0FBbkI7QUFDQSxZQUFNQyxVQUFVLENBQUMsTUFBTSxrQkFBR0MsT0FBSCxDQUFXSixVQUFYLENBQVAsRUFBK0JILElBQS9CLENBQW9DO0FBQUEsZUFBUVEsS0FBS0MsUUFBTCxDQUFjLE1BQWQsQ0FBUjtBQUFBLE9BQXBDLENBQWhCO0FBQ0EsVUFBSSxDQUFDSCxPQUFMLEVBQWM7QUFDWixjQUFNLGlDQUFOO0FBQ0Q7QUFDRCxZQUFNSSxVQUFVLGVBQUtOLE9BQUwsQ0FBYUQsVUFBYixFQUF5QkcsT0FBekIsQ0FBaEI7QUFDQSxZQUFNSyx3QkFBeUIsaUJBQWdCLGVBQUtDLFFBQUwsQ0FBY0YsT0FBZCxDQUF1QixFQUF0RTs7QUFFQSxZQUFNLHVCQUFRQSxPQUFSLEVBQWlCQyxxQkFBakIsRUFBd0NkLGNBQXhDLEVBQXdELElBQXhELENBQU47O0FBRUEsWUFBTSxpQ0FBYSxNQUFiLEVBQXFCLENBQUMsSUFBRCxFQUFPYyxxQkFBUCxDQUFyQixFQUFvRCxFQUFFRSxVQUFVLElBQVosRUFBcEQsQ0FBTjtBQUNELEtBWkQsU0FZVTtBQUNSLFlBQU0sMkJBQWFkLFdBQWIsQ0FBTjtBQUNEO0FBQ0YsRyIsImZpbGUiOiJpbnN0YWxsZXJzL2Rhcndpbi9kbWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3Bhd25Qcm9taXNlIGZyb20gJ2Nyb3NzLXNwYXduLXByb21pc2UnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBnZXRNb3VudGVkSW1hZ2VzLCBtb3VudEltYWdlLCB1bm1vdW50SW1hZ2UgfSBmcm9tICcuLi8uLi91dGlsL2hkaXV0aWwnO1xuaW1wb3J0IG1vdmVBcHAgZnJvbSAnLi4vLi4vdXRpbC9tb3ZlLWFwcCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChmaWxlUGF0aCwgaW5zdGFsbFNwaW5uZXIpID0+IHtcbiAgY29uc3QgbW91bnRzID0gYXdhaXQgZ2V0TW91bnRlZEltYWdlcygpO1xuICBsZXQgdGFyZ2V0TW91bnQgPSBtb3VudHMuZmluZChtb3VudCA9PiBtb3VudC5pbWFnZVBhdGggPT09IGZpbGVQYXRoKTtcblxuICBpZiAoIXRhcmdldE1vdW50KSB7XG4gICAgdGFyZ2V0TW91bnQgPSBhd2FpdCBtb3VudEltYWdlKGZpbGVQYXRoKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3Qgdm9sdW1lUGF0aCA9IHBhdGgucmVzb2x2ZSgnL1ZvbHVtZXMnLCB0YXJnZXRNb3VudC5tb3VudFBhdGgpO1xuICAgIGNvbnN0IGFwcE5hbWUgPSAoYXdhaXQgZnMucmVhZGRpcih2b2x1bWVQYXRoKSkuZmluZChmaWxlID0+IGZpbGUuZW5kc1dpdGgoJy5hcHAnKSk7XG4gICAgaWYgKCFhcHBOYW1lKSB7XG4gICAgICB0aHJvdyAnRmFpbGVkIHRvIGZpbmQgLmFwcCBmaWxlIGluIERNRyc7XG4gICAgfVxuICAgIGNvbnN0IGFwcFBhdGggPSBwYXRoLnJlc29sdmUodm9sdW1lUGF0aCwgYXBwTmFtZSk7XG4gICAgY29uc3QgdGFyZ2V0QXBwbGljYXRpb25QYXRoID0gYC9BcHBsaWNhdGlvbnMvJHtwYXRoLmJhc2VuYW1lKGFwcFBhdGgpfWA7XG5cbiAgICBhd2FpdCBtb3ZlQXBwKGFwcFBhdGgsIHRhcmdldEFwcGxpY2F0aW9uUGF0aCwgaW5zdGFsbFNwaW5uZXIsIHRydWUpO1xuXG4gICAgYXdhaXQgc3Bhd25Qcm9taXNlKCdvcGVuJywgWyctUicsIHRhcmdldEFwcGxpY2F0aW9uUGF0aF0sIHsgZGV0YWNoZWQ6IHRydWUgfSk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgdW5tb3VudEltYWdlKHRhcmdldE1vdW50KTtcbiAgfVxufTtcbiJdfQ==